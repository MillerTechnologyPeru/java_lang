
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:11 GMT 2016 ///

/// class java.lang.Long ///

open class Long: Number, JavaComparable {

    public convenience init?( casting object: JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.lang.Long", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var LongJNIClass: jclass?

    /// public static final long java.lang.Long.MIN_VALUE

    private static var MIN_VALUE_FieldID: jfieldID?

    open static var MIN_VALUE: Int64 {
        get {
            let __value = JNIField.GetStaticLongField( fieldName: "MIN_VALUE", fieldType: "J", fieldCache: &MIN_VALUE_FieldID, className: "java/lang/Long", classCache: &LongJNIClass )
            return JNIType.decode( type: Int64(), from: __value )
        }
    }

    /// public static final long java.lang.Long.MAX_VALUE

    private static var MAX_VALUE_FieldID: jfieldID?

    open static var MAX_VALUE: Int64 {
        get {
            let __value = JNIField.GetStaticLongField( fieldName: "MAX_VALUE", fieldType: "J", fieldCache: &MAX_VALUE_FieldID, className: "java/lang/Long", classCache: &LongJNIClass )
            return JNIType.decode( type: Int64(), from: __value )
        }
    }

    /// public static final java.lang.Class java.lang.Long.TYPE

    private static var TYPE_FieldID: jfieldID?

    open static var TYPE: Class! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "TYPE", fieldType: "Ljava/lang/Class;", fieldCache: &TYPE_FieldID, className: "java/lang/Long", classCache: &LongJNIClass )
            return __value != nil ? Class( javaObject: __value ) : nil
        }
    }

    /// private static final long java.lang.Long.MULTMIN_RADIX_TEN

    /// private static final long java.lang.Long.N_MULTMAX_RADIX_TEN

    /// private final long java.lang.Long.value

    /// public static final int java.lang.Long.SIZE

    private static var SIZE_FieldID: jfieldID?

    open static var SIZE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SIZE", fieldType: "I", fieldCache: &SIZE_FieldID, className: "java/lang/Long", classCache: &LongJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// private static final long java.lang.Long.serialVersionUID

    /// private static final long java.lang.Number.serialVersionUID

    /// public java.lang.Long(long)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Int64 ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/Long", classCache: &Long.LongJNIClass, methodSig: "(J)V", methodCache: &Long.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int64 ) {
        self.init( arg0: _arg0 )
    }

    /// public java.lang.Long(java.lang.String) throws java.lang.NumberFormatException

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: String? ) throws {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/Long", classCache: &Long.LongJNIClass, methodSig: "(Ljava/lang/String;)V", methodCache: &Long.new_MethodID_2, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw NumberFormatException( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String? ) throws {
        try self.init( arg0: _arg0 )
    }

    /// public static int java.lang.Long.numberOfLeadingZeros(long)

    private static var numberOfLeadingZeros_MethodID_3: jmethodID?

    open class func numberOfLeadingZeros( arg0: Int64 ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Long", classCache: &LongJNIClass, methodName: "numberOfLeadingZeros", methodSig: "(J)I", methodCache: &numberOfLeadingZeros_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func numberOfLeadingZeros( _ _arg0: Int64 ) -> Int {
        return numberOfLeadingZeros( arg0: _arg0 )
    }

    /// public static int java.lang.Long.numberOfTrailingZeros(long)

    private static var numberOfTrailingZeros_MethodID_4: jmethodID?

    open class func numberOfTrailingZeros( arg0: Int64 ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Long", classCache: &LongJNIClass, methodName: "numberOfTrailingZeros", methodSig: "(J)I", methodCache: &numberOfTrailingZeros_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func numberOfTrailingZeros( _ _arg0: Int64 ) -> Int {
        return numberOfTrailingZeros( arg0: _arg0 )
    }

    /// public static int java.lang.Long.bitCount(long)

    private static var bitCount_MethodID_5: jmethodID?

    open class func bitCount( arg0: Int64 ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Long", classCache: &LongJNIClass, methodName: "bitCount", methodSig: "(J)I", methodCache: &bitCount_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func bitCount( _ _arg0: Int64 ) -> Int {
        return bitCount( arg0: _arg0 )
    }

    /// public boolean java.lang.Long.equals(java.lang.Object)

    /// public java.lang.String java.lang.Long.toString()

    /// public static java.lang.String java.lang.Long.toString(long)

    private static var toString_MethodID_6: jmethodID?

    open class func toString( arg0: Int64 ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Long", classCache: &LongJNIClass, methodName: "toString", methodSig: "(J)Ljava/lang/String;", methodCache: &toString_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }

    open class func toString( _ _arg0: Int64 ) -> String! {
        return toString( arg0: _arg0 )
    }

    /// public static java.lang.String java.lang.Long.toString(long,int)

    private static var toString_MethodID_7: jmethodID?

    open class func toString( arg0: Int64, arg1: Int ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Long", classCache: &LongJNIClass, methodName: "toString", methodSig: "(JI)Ljava/lang/String;", methodCache: &toString_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }

    open class func toString( _ _arg0: Int64, _ _arg1: Int ) -> String! {
        return toString( arg0: _arg0, arg1: _arg1 )
    }

    /// public int java.lang.Long.hashCode()

    /// public static long java.lang.Long.reverseBytes(long)

    private static var reverseBytes_MethodID_8: jmethodID?

    open class func reverseBytes( arg0: Int64 ) -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticLongMethod( className: "java/lang/Long", classCache: &LongJNIClass, methodName: "reverseBytes", methodSig: "(J)J", methodCache: &reverseBytes_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }

    open class func reverseBytes( _ _arg0: Int64 ) -> Int64 {
        return reverseBytes( arg0: _arg0 )
    }

    /// public int java.lang.Long.compareTo(java.lang.Long)

    private static var compareTo_MethodID_9: jmethodID?

    open func compareTo( arg0: Long? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "compareTo", methodSig: "(Ljava/lang/Long;)I", methodCache: &Long.compareTo_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func compareTo( _ _arg0: Long? ) -> Int {
        return compareTo( arg0: _arg0 )
    }

    /// public int java.lang.Long.compareTo(java.lang.Object)

    private static var compareTo_MethodID_10: jmethodID?

    open func compareTo( arg0: JavaObject? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "compareTo", methodSig: "(Ljava/lang/Object;)I", methodCache: &Long.compareTo_MethodID_10, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func compareTo( _ _arg0: JavaObject? ) -> Int {
        return compareTo( arg0: _arg0 )
    }

    /// public static java.lang.Long java.lang.Long.getLong(java.lang.String)

    private static var getLong_MethodID_11: jmethodID?

    open class func getLong( arg0: String? ) -> Long! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Long", classCache: &LongJNIClass, methodName: "getLong", methodSig: "(Ljava/lang/String;)Ljava/lang/Long;", methodCache: &getLong_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Long( javaObject: __return ) : nil
    }

    open class func getLong( _ _arg0: String? ) -> Long! {
        return getLong( arg0: _arg0 )
    }

    /// public static java.lang.Long java.lang.Long.getLong(java.lang.String,long)

    private static var getLong_MethodID_12: jmethodID?

    open class func getLong( arg0: String?, arg1: Int64 ) -> Long! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Long", classCache: &LongJNIClass, methodName: "getLong", methodSig: "(Ljava/lang/String;J)Ljava/lang/Long;", methodCache: &getLong_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Long( javaObject: __return ) : nil
    }

    open class func getLong( _ _arg0: String?, _ _arg1: Int64 ) -> Long! {
        return getLong( arg0: _arg0, arg1: _arg1 )
    }

    /// public static java.lang.Long java.lang.Long.getLong(java.lang.String,java.lang.Long)

    private static var getLong_MethodID_13: jmethodID?

    open class func getLong( arg0: String?, arg1: Long? ) -> Long! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Long", classCache: &LongJNIClass, methodName: "getLong", methodSig: "(Ljava/lang/String;Ljava/lang/Long;)Ljava/lang/Long;", methodCache: &getLong_MethodID_13, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Long( javaObject: __return ) : nil
    }

    open class func getLong( _ _arg0: String?, _ _arg1: Long? ) -> Long! {
        return getLong( arg0: _arg0, arg1: _arg1 )
    }

    /// public byte java.lang.Long.byteValue()

    /// public short java.lang.Long.shortValue()

    /// public int java.lang.Long.intValue()

    /// public long java.lang.Long.longValue()

    /// public float java.lang.Long.floatValue()

    /// public double java.lang.Long.doubleValue()

    /// public static java.lang.Long java.lang.Long.valueOf(java.lang.String) throws java.lang.NumberFormatException

    private static var valueOf_MethodID_14: jmethodID?

    open class func valueOf( arg0: String? ) throws /* java.lang.NumberFormatException */ -> Long! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Long", classCache: &LongJNIClass, methodName: "valueOf", methodSig: "(Ljava/lang/String;)Ljava/lang/Long;", methodCache: &valueOf_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw NumberFormatException( javaObject: throwable )
        }
        return __return != nil ? Long( javaObject: __return ) : nil
    }

    open class func valueOf( _ _arg0: String? ) throws /* java.lang.NumberFormatException */ -> Long! {
        return try valueOf( arg0: _arg0 )
    }

    /// public static java.lang.Long java.lang.Long.valueOf(java.lang.String,int) throws java.lang.NumberFormatException

    private static var valueOf_MethodID_15: jmethodID?

    open class func valueOf( arg0: String?, arg1: Int ) throws /* java.lang.NumberFormatException */ -> Long! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Long", classCache: &LongJNIClass, methodName: "valueOf", methodSig: "(Ljava/lang/String;I)Ljava/lang/Long;", methodCache: &valueOf_MethodID_15, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw NumberFormatException( javaObject: throwable )
        }
        return __return != nil ? Long( javaObject: __return ) : nil
    }

    open class func valueOf( _ _arg0: String?, _ _arg1: Int ) throws /* java.lang.NumberFormatException */ -> Long! {
        return try valueOf( arg0: _arg0, arg1: _arg1 )
    }

    /// public static java.lang.Long java.lang.Long.valueOf(long)

    private static var valueOf_MethodID_16: jmethodID?

    open class func valueOf( arg0: Int64 ) -> Long! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Long", classCache: &LongJNIClass, methodName: "valueOf", methodSig: "(J)Ljava/lang/Long;", methodCache: &valueOf_MethodID_16, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Long( javaObject: __return ) : nil
    }

    open class func valueOf( _ _arg0: Int64 ) -> Long! {
        return valueOf( arg0: _arg0 )
    }

    /// public static java.lang.String java.lang.Long.toHexString(long)

    private static var toHexString_MethodID_17: jmethodID?

    open class func toHexString( arg0: Int64 ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Long", classCache: &LongJNIClass, methodName: "toHexString", methodSig: "(J)Ljava/lang/String;", methodCache: &toHexString_MethodID_17, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }

    open class func toHexString( _ _arg0: Int64 ) -> String! {
        return toHexString( arg0: _arg0 )
    }

    /// static void java.lang.Long.getChars(long,int,char[])

    /// public static java.lang.Long java.lang.Long.decode(java.lang.String) throws java.lang.NumberFormatException

    private static var decode_MethodID_18: jmethodID?

    open class func decode( arg0: String? ) throws /* java.lang.NumberFormatException */ -> Long! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Long", classCache: &LongJNIClass, methodName: "decode", methodSig: "(Ljava/lang/String;)Ljava/lang/Long;", methodCache: &decode_MethodID_18, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw NumberFormatException( javaObject: throwable )
        }
        return __return != nil ? Long( javaObject: __return ) : nil
    }

    open class func decode( _ _arg0: String? ) throws /* java.lang.NumberFormatException */ -> Long! {
        return try decode( arg0: _arg0 )
    }

    /// public static long java.lang.Long.reverse(long)

    private static var reverse_MethodID_19: jmethodID?

    open class func reverse( arg0: Int64 ) -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticLongMethod( className: "java/lang/Long", classCache: &LongJNIClass, methodName: "reverse", methodSig: "(J)J", methodCache: &reverse_MethodID_19, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }

    open class func reverse( _ _arg0: Int64 ) -> Int64 {
        return reverse( arg0: _arg0 )
    }

    /// public static java.lang.String java.lang.Long.toOctalString(long)

    private static var toOctalString_MethodID_20: jmethodID?

    open class func toOctalString( arg0: Int64 ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Long", classCache: &LongJNIClass, methodName: "toOctalString", methodSig: "(J)Ljava/lang/String;", methodCache: &toOctalString_MethodID_20, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }

    open class func toOctalString( _ _arg0: Int64 ) -> String! {
        return toOctalString( arg0: _arg0 )
    }

    /// public static java.lang.String java.lang.Long.toBinaryString(long)

    private static var toBinaryString_MethodID_21: jmethodID?

    open class func toBinaryString( arg0: Int64 ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Long", classCache: &LongJNIClass, methodName: "toBinaryString", methodSig: "(J)Ljava/lang/String;", methodCache: &toBinaryString_MethodID_21, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }

    open class func toBinaryString( _ _arg0: Int64 ) -> String! {
        return toBinaryString( arg0: _arg0 )
    }

    /// private static java.lang.String java.lang.Long.toUnsignedString(long,int)

    /// static int java.lang.Long.stringSize(long)

    /// public static long java.lang.Long.highestOneBit(long)

    private static var highestOneBit_MethodID_22: jmethodID?

    open class func highestOneBit( arg0: Int64 ) -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticLongMethod( className: "java/lang/Long", classCache: &LongJNIClass, methodName: "highestOneBit", methodSig: "(J)J", methodCache: &highestOneBit_MethodID_22, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }

    open class func highestOneBit( _ _arg0: Int64 ) -> Int64 {
        return highestOneBit( arg0: _arg0 )
    }

    /// public static long java.lang.Long.lowestOneBit(long)

    private static var lowestOneBit_MethodID_23: jmethodID?

    open class func lowestOneBit( arg0: Int64 ) -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticLongMethod( className: "java/lang/Long", classCache: &LongJNIClass, methodName: "lowestOneBit", methodSig: "(J)J", methodCache: &lowestOneBit_MethodID_23, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }

    open class func lowestOneBit( _ _arg0: Int64 ) -> Int64 {
        return lowestOneBit( arg0: _arg0 )
    }

    /// public static long java.lang.Long.rotateLeft(long,int)

    private static var rotateLeft_MethodID_24: jmethodID?

    open class func rotateLeft( arg0: Int64, arg1: Int ) -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticLongMethod( className: "java/lang/Long", classCache: &LongJNIClass, methodName: "rotateLeft", methodSig: "(JI)J", methodCache: &rotateLeft_MethodID_24, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }

    open class func rotateLeft( _ _arg0: Int64, _ _arg1: Int ) -> Int64 {
        return rotateLeft( arg0: _arg0, arg1: _arg1 )
    }

    /// public static long java.lang.Long.rotateRight(long,int)

    private static var rotateRight_MethodID_25: jmethodID?

    open class func rotateRight( arg0: Int64, arg1: Int ) -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticLongMethod( className: "java/lang/Long", classCache: &LongJNIClass, methodName: "rotateRight", methodSig: "(JI)J", methodCache: &rotateRight_MethodID_25, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }

    open class func rotateRight( _ _arg0: Int64, _ _arg1: Int ) -> Int64 {
        return rotateRight( arg0: _arg0, arg1: _arg1 )
    }

    /// public static int java.lang.Long.signum(long)

    private static var signum_MethodID_26: jmethodID?

    open class func signum( arg0: Int64 ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Long", classCache: &LongJNIClass, methodName: "signum", methodSig: "(J)I", methodCache: &signum_MethodID_26, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func signum( _ _arg0: Int64 ) -> Int {
        return signum( arg0: _arg0 )
    }

    /// public static long java.lang.Long.parseLong(java.lang.String,int) throws java.lang.NumberFormatException

    private static var parseLong_MethodID_27: jmethodID?

    open class func parseLong( arg0: String?, arg1: Int ) throws /* java.lang.NumberFormatException */ -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticLongMethod( className: "java/lang/Long", classCache: &LongJNIClass, methodName: "parseLong", methodSig: "(Ljava/lang/String;I)J", methodCache: &parseLong_MethodID_27, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw NumberFormatException( javaObject: throwable )
        }
        return JNIType.decode( type: Int64(), from: __return )
    }

    open class func parseLong( _ _arg0: String?, _ _arg1: Int ) throws /* java.lang.NumberFormatException */ -> Int64 {
        return try parseLong( arg0: _arg0, arg1: _arg1 )
    }

    /// public static long java.lang.Long.parseLong(java.lang.String) throws java.lang.NumberFormatException

    private static var parseLong_MethodID_28: jmethodID?

    open class func parseLong( arg0: String? ) throws /* java.lang.NumberFormatException */ -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticLongMethod( className: "java/lang/Long", classCache: &LongJNIClass, methodName: "parseLong", methodSig: "(Ljava/lang/String;)J", methodCache: &parseLong_MethodID_28, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw NumberFormatException( javaObject: throwable )
        }
        return JNIType.decode( type: Int64(), from: __return )
    }

    open class func parseLong( _ _arg0: String? ) throws /* java.lang.NumberFormatException */ -> Int64 {
        return try parseLong( arg0: _arg0 )
    }

}
