
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:04 GMT 2016 ///

/// interface java.lang.management.ClassLoadingMXBean ///

public protocol ClassLoadingMXBean: JavaProtocol {

    /// public abstract long java.lang.management.ClassLoadingMXBean.getTotalLoadedClassCount()

    func getTotalLoadedClassCount() -> Int64

    /// public abstract int java.lang.management.ClassLoadingMXBean.getLoadedClassCount()

    func getLoadedClassCount() -> Int

    /// public abstract long java.lang.management.ClassLoadingMXBean.getUnloadedClassCount()

    func getUnloadedClassCount() -> Int64

    /// public abstract boolean java.lang.management.ClassLoadingMXBean.isVerbose()

    func isVerbose() -> Bool

    /// public abstract void java.lang.management.ClassLoadingMXBean.setVerbose(boolean)

    func setVerbose( arg0: Bool )
    func setVerbose( _ _arg0: Bool )

}

open class ClassLoadingMXBeanForward: JNIObjectForward, ClassLoadingMXBean {

    private static var ClassLoadingMXBeanJNIClass: jclass?

    /// public abstract long java.lang.management.ClassLoadingMXBean.getTotalLoadedClassCount()

    private static var getTotalLoadedClassCount_MethodID_6: jmethodID?

    open func getTotalLoadedClassCount() -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getTotalLoadedClassCount", methodSig: "()J", methodCache: &ClassLoadingMXBeanForward.getTotalLoadedClassCount_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }


    /// public abstract int java.lang.management.ClassLoadingMXBean.getLoadedClassCount()

    private static var getLoadedClassCount_MethodID_7: jmethodID?

    open func getLoadedClassCount() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getLoadedClassCount", methodSig: "()I", methodCache: &ClassLoadingMXBeanForward.getLoadedClassCount_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract long java.lang.management.ClassLoadingMXBean.getUnloadedClassCount()

    private static var getUnloadedClassCount_MethodID_8: jmethodID?

    open func getUnloadedClassCount() -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getUnloadedClassCount", methodSig: "()J", methodCache: &ClassLoadingMXBeanForward.getUnloadedClassCount_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }


    /// public abstract boolean java.lang.management.ClassLoadingMXBean.isVerbose()

    private static var isVerbose_MethodID_9: jmethodID?

    open func isVerbose() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isVerbose", methodSig: "()Z", methodCache: &ClassLoadingMXBeanForward.isVerbose_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public abstract void java.lang.management.ClassLoadingMXBean.setVerbose(boolean)

    private static var setVerbose_MethodID_10: jmethodID?

    open func setVerbose( arg0: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setVerbose", methodSig: "(Z)V", methodCache: &ClassLoadingMXBeanForward.setVerbose_MethodID_10, args: &__args, locals: &__locals )
    }

    open func setVerbose( _ _arg0: Bool ) {
        setVerbose( arg0: _arg0 )
    }

}


