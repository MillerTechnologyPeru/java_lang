
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:25 GMT 2016 ///

/// interface java.lang.Runnable ///

public protocol Runnable: JavaProtocol {

    /// public abstract void java.lang.Runnable.run()

    func run()

}

open class RunnableForward: JNIObjectForward, Runnable {

    private static var RunnableJNIClass: jclass?

    /// public abstract void java.lang.Runnable.run()

    private static var run_MethodID_2: jmethodID?

    open func run() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "run", methodSig: "()V", methodCache: &RunnableForward.run_MethodID_2, args: &__args, locals: &__locals )
    }


}


private typealias Runnable_run_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject? ) -> ()

private func Runnable_run_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject? ) -> () {
    RunnableBase.swiftObject( jniEnv: __env, javaObject: __this ).run( )
}

open class RunnableBase: JNIObjectProxy, Runnable {

    private static var nativesRegistered = false

    private static func registerNatives() {
        if ( !nativesRegistered ) {
            var natives = [JNINativeMethod]()

            let Runnable_run_0_thunk: Runnable_run_0_type = Runnable_run_0
            natives.append( JNINativeMethod( name: strdup("__run"), signature: strdup("()V"), fnPtr: unsafeBitCast( Runnable_run_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

            withUnsafePointer(to: &natives[0]) {
                nativesPtr in
                let clazz = JNI.FindClass( "org/genie/java_lang/RunnableProxy" )
                if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                    JNI.report( "Unable to register java natives" )
                }
            }

            nativesRegistered = true
        }
    }

    public convenience init() {
        self.init( javaObject: nil )
    }

    public required init( javaObject: jobject? ) {
        super.init( javaObject: javaObject )
        RunnableBase.registerNatives()
        createProxy( javaClassName: "org/genie/java_lang/RunnableProxy" )
    }

    static func swiftObject( jniEnv: UnsafeMutablePointer<JNIEnv?>?, javaObject: jobject? ) -> RunnableBase {
        return unsafeBitCast( swiftPointer( jniEnv: jniEnv, object: javaObject ), to: RunnableBase.self )
    }

    /// public abstract void java.lang.Runnable.run()

    open func run() /**/ {
    }


}
