
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:09 GMT 2016 ///

/// class java.lang.Compiler ///

open class Compiler: JavaObject {

    public convenience init?( casting object: JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.lang.Compiler", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var CompilerJNIClass: jclass?

    /// private java.lang.Compiler()

    /// private static native void java.lang.Compiler.registerNatives()

    /// static void java.lang.Compiler.access$000()

    /// private static native void java.lang.Compiler.initialize()

    /// public static native boolean java.lang.Compiler.compileClass(java.lang.Class)

    private static var compileClass_MethodID_1: jmethodID?

    open class func compileClass( arg0: Class? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Compiler", classCache: &CompilerJNIClass, methodName: "compileClass", methodSig: "(Ljava/lang/Class;)Z", methodCache: &compileClass_MethodID_1, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func compileClass( _ _arg0: Class? ) -> Bool {
        return compileClass( arg0: _arg0 )
    }

    /// public static native boolean java.lang.Compiler.compileClasses(java.lang.String)

    private static var compileClasses_MethodID_2: jmethodID?

    open class func compileClasses( arg0: String? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Compiler", classCache: &CompilerJNIClass, methodName: "compileClasses", methodSig: "(Ljava/lang/String;)Z", methodCache: &compileClasses_MethodID_2, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func compileClasses( _ _arg0: String? ) -> Bool {
        return compileClasses( arg0: _arg0 )
    }

    /// public static native java.lang.Object java.lang.Compiler.command(java.lang.Object)

    private static var command_MethodID_3: jmethodID?

    open class func command( arg0: JavaObject? ) -> JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Compiler", classCache: &CompilerJNIClass, methodName: "command", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &command_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaObject( javaObject: __return ) : nil
    }

    open class func command( _ _arg0: JavaObject? ) -> JavaObject! {
        return command( arg0: _arg0 )
    }

    /// public static native void java.lang.Compiler.enable()

    private static var enable_MethodID_4: jmethodID?

    open class func enable() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallStaticVoidMethod( className: "java/lang/Compiler", classCache: &CompilerJNIClass, methodName: "enable", methodSig: "()V", methodCache: &enable_MethodID_4, args: &__args, locals: &__locals )
    }


    /// public static native void java.lang.Compiler.disable()

    private static var disable_MethodID_5: jmethodID?

    open class func disable() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallStaticVoidMethod( className: "java/lang/Compiler", classCache: &CompilerJNIClass, methodName: "disable", methodSig: "()V", methodCache: &disable_MethodID_5, args: &__args, locals: &__locals )
    }


}
