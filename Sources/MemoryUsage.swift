
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:05 GMT 2016 ///

/// class java.lang.management.MemoryUsage ///

open class MemoryUsage: JavaObject {

    public convenience init?( casting object: JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.lang.management.MemoryUsage", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var MemoryUsageJNIClass: jclass?

    /// private final long java.lang.management.MemoryUsage.init

    /// private final long java.lang.management.MemoryUsage.used

    /// private final long java.lang.management.MemoryUsage.committed

    /// private final long java.lang.management.MemoryUsage.max

    /// private java.lang.management.MemoryUsage(javax.management.openmbean.CompositeData)

    /// public java.lang.management.MemoryUsage(long,long,long,long)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Int64, arg1: Int64, arg2: Int64, arg3: Int64 ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/management/MemoryUsage", classCache: &MemoryUsage.MemoryUsageJNIClass, methodSig: "(JJJJ)V", methodCache: &MemoryUsage.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int64, _ _arg1: Int64, _ _arg2: Int64, _ _arg3: Int64 ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public java.lang.String java.lang.management.MemoryUsage.toString()

    /// public static java.lang.management.MemoryUsage java.lang.management.MemoryUsage.from(javax.management.openmbean.CompositeData)

    private static var from_MethodID_2: jmethodID?

    open class func from( arg0: /* javax.management.openmbean.CompositeData */ UnclassedProtocol? ) -> MemoryUsage! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/management/MemoryUsage", classCache: &MemoryUsageJNIClass, methodName: "from", methodSig: "(Ljavax/management/openmbean/CompositeData;)Ljava/lang/management/MemoryUsage;", methodCache: &from_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? MemoryUsage( javaObject: __return ) : nil
    }

    open class func from( _ _arg0: /* javax.management.openmbean.CompositeData */ UnclassedProtocol? ) -> MemoryUsage! {
        return from( arg0: _arg0 )
    }

    /// public long java.lang.management.MemoryUsage.getInit()

    private static var getInit_MethodID_3: jmethodID?

    open func getInit() -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getInit", methodSig: "()J", methodCache: &MemoryUsage.getInit_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }


    /// public long java.lang.management.MemoryUsage.getUsed()

    private static var getUsed_MethodID_4: jmethodID?

    open func getUsed() -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getUsed", methodSig: "()J", methodCache: &MemoryUsage.getUsed_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }


    /// public long java.lang.management.MemoryUsage.getCommitted()

    private static var getCommitted_MethodID_5: jmethodID?

    open func getCommitted() -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getCommitted", methodSig: "()J", methodCache: &MemoryUsage.getCommitted_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }


    /// public long java.lang.management.MemoryUsage.getMax()

    private static var getMax_MethodID_6: jmethodID?

    open func getMax() -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getMax", methodSig: "()J", methodCache: &MemoryUsage.getMax_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }


}
