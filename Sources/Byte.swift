
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:12 GMT 2016 ///

/// class java.lang.Byte ///

open class Byte: Number, JavaComparable {

    public convenience init?( casting object: JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.lang.Byte", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ByteJNIClass: jclass?

    /// public static final byte java.lang.Byte.MIN_VALUE

    private static var MIN_VALUE_FieldID: jfieldID?

    open static var MIN_VALUE: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "MIN_VALUE", fieldType: "B", fieldCache: &MIN_VALUE_FieldID, className: "java/lang/Byte", classCache: &ByteJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Byte.MAX_VALUE

    private static var MAX_VALUE_FieldID: jfieldID?

    open static var MAX_VALUE: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "MAX_VALUE", fieldType: "B", fieldCache: &MAX_VALUE_FieldID, className: "java/lang/Byte", classCache: &ByteJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final java.lang.Class java.lang.Byte.TYPE

    private static var TYPE_FieldID: jfieldID?

    open static var TYPE: Class! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "TYPE", fieldType: "Ljava/lang/Class;", fieldCache: &TYPE_FieldID, className: "java/lang/Byte", classCache: &ByteJNIClass )
            return __value != nil ? Class( javaObject: __value ) : nil
        }
    }

    /// private final byte java.lang.Byte.value

    /// public static final int java.lang.Byte.SIZE

    private static var SIZE_FieldID: jfieldID?

    open static var SIZE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SIZE", fieldType: "I", fieldCache: &SIZE_FieldID, className: "java/lang/Byte", classCache: &ByteJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// private static final long java.lang.Byte.serialVersionUID

    /// private static final long java.lang.Number.serialVersionUID

    /// public java.lang.Byte(byte)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Int8 ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/Byte", classCache: &Byte.ByteJNIClass, methodSig: "(B)V", methodCache: &Byte.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int8 ) {
        self.init( arg0: _arg0 )
    }

    /// public java.lang.Byte(java.lang.String) throws java.lang.NumberFormatException

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: String? ) throws {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/Byte", classCache: &Byte.ByteJNIClass, methodSig: "(Ljava/lang/String;)V", methodCache: &Byte.new_MethodID_2, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw NumberFormatException( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String? ) throws {
        try self.init( arg0: _arg0 )
    }

    /// public boolean java.lang.Byte.equals(java.lang.Object)

    /// public static java.lang.String java.lang.Byte.toString(byte)

    private static var toString_MethodID_3: jmethodID?

    open class func toString( arg0: Int8 ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Byte", classCache: &ByteJNIClass, methodName: "toString", methodSig: "(B)Ljava/lang/String;", methodCache: &toString_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }

    open class func toString( _ _arg0: Int8 ) -> String! {
        return toString( arg0: _arg0 )
    }

    /// public java.lang.String java.lang.Byte.toString()

    /// public int java.lang.Byte.hashCode()

    /// public int java.lang.Byte.compareTo(java.lang.Object)

    private static var compareTo_MethodID_4: jmethodID?

    open func compareTo( arg0: JavaObject? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "compareTo", methodSig: "(Ljava/lang/Object;)I", methodCache: &Byte.compareTo_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func compareTo( _ _arg0: JavaObject? ) -> Int {
        return compareTo( arg0: _arg0 )
    }

    /// public int java.lang.Byte.compareTo(java.lang.Byte)

    private static var compareTo_MethodID_5: jmethodID?

    open func compareTo( arg0: Byte? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "compareTo", methodSig: "(Ljava/lang/Byte;)I", methodCache: &Byte.compareTo_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func compareTo( _ _arg0: Byte? ) -> Int {
        return compareTo( arg0: _arg0 )
    }

    /// public byte java.lang.Byte.byteValue()

    /// public short java.lang.Byte.shortValue()

    /// public int java.lang.Byte.intValue()

    /// public long java.lang.Byte.longValue()

    /// public float java.lang.Byte.floatValue()

    /// public double java.lang.Byte.doubleValue()

    /// public static java.lang.Byte java.lang.Byte.valueOf(java.lang.String) throws java.lang.NumberFormatException

    private static var valueOf_MethodID_6: jmethodID?

    open class func valueOf( arg0: String? ) throws /* java.lang.NumberFormatException */ -> Byte! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Byte", classCache: &ByteJNIClass, methodName: "valueOf", methodSig: "(Ljava/lang/String;)Ljava/lang/Byte;", methodCache: &valueOf_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw NumberFormatException( javaObject: throwable )
        }
        return __return != nil ? Byte( javaObject: __return ) : nil
    }

    open class func valueOf( _ _arg0: String? ) throws /* java.lang.NumberFormatException */ -> Byte! {
        return try valueOf( arg0: _arg0 )
    }

    /// public static java.lang.Byte java.lang.Byte.valueOf(java.lang.String,int) throws java.lang.NumberFormatException

    private static var valueOf_MethodID_7: jmethodID?

    open class func valueOf( arg0: String?, arg1: Int ) throws /* java.lang.NumberFormatException */ -> Byte! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Byte", classCache: &ByteJNIClass, methodName: "valueOf", methodSig: "(Ljava/lang/String;I)Ljava/lang/Byte;", methodCache: &valueOf_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw NumberFormatException( javaObject: throwable )
        }
        return __return != nil ? Byte( javaObject: __return ) : nil
    }

    open class func valueOf( _ _arg0: String?, _ _arg1: Int ) throws /* java.lang.NumberFormatException */ -> Byte! {
        return try valueOf( arg0: _arg0, arg1: _arg1 )
    }

    /// public static java.lang.Byte java.lang.Byte.valueOf(byte)

    private static var valueOf_MethodID_8: jmethodID?

    open class func valueOf( arg0: Int8 ) -> Byte! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Byte", classCache: &ByteJNIClass, methodName: "valueOf", methodSig: "(B)Ljava/lang/Byte;", methodCache: &valueOf_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Byte( javaObject: __return ) : nil
    }

    open class func valueOf( _ _arg0: Int8 ) -> Byte! {
        return valueOf( arg0: _arg0 )
    }

    /// public static java.lang.Byte java.lang.Byte.decode(java.lang.String) throws java.lang.NumberFormatException

    private static var decode_MethodID_9: jmethodID?

    open class func decode( arg0: String? ) throws /* java.lang.NumberFormatException */ -> Byte! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Byte", classCache: &ByteJNIClass, methodName: "decode", methodSig: "(Ljava/lang/String;)Ljava/lang/Byte;", methodCache: &decode_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw NumberFormatException( javaObject: throwable )
        }
        return __return != nil ? Byte( javaObject: __return ) : nil
    }

    open class func decode( _ _arg0: String? ) throws /* java.lang.NumberFormatException */ -> Byte! {
        return try decode( arg0: _arg0 )
    }

    /// public static byte java.lang.Byte.parseByte(java.lang.String) throws java.lang.NumberFormatException

    private static var parseByte_MethodID_10: jmethodID?

    open class func parseByte( arg0: String? ) throws /* java.lang.NumberFormatException */ -> Int8 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticByteMethod( className: "java/lang/Byte", classCache: &ByteJNIClass, methodName: "parseByte", methodSig: "(Ljava/lang/String;)B", methodCache: &parseByte_MethodID_10, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw NumberFormatException( javaObject: throwable )
        }
        return JNIType.decode( type: Int8(), from: __return )
    }

    open class func parseByte( _ _arg0: String? ) throws /* java.lang.NumberFormatException */ -> Int8 {
        return try parseByte( arg0: _arg0 )
    }

    /// public static byte java.lang.Byte.parseByte(java.lang.String,int) throws java.lang.NumberFormatException

    private static var parseByte_MethodID_11: jmethodID?

    open class func parseByte( arg0: String?, arg1: Int ) throws /* java.lang.NumberFormatException */ -> Int8 {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticByteMethod( className: "java/lang/Byte", classCache: &ByteJNIClass, methodName: "parseByte", methodSig: "(Ljava/lang/String;I)B", methodCache: &parseByte_MethodID_11, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw NumberFormatException( javaObject: throwable )
        }
        return JNIType.decode( type: Int8(), from: __return )
    }

    open class func parseByte( _ _arg0: String?, _ _arg1: Int ) throws /* java.lang.NumberFormatException */ -> Int8 {
        return try parseByte( arg0: _arg0, arg1: _arg1 )
    }

}
