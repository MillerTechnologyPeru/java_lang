
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:14 GMT 2016 ///

/// class java.lang.StackTraceElement ///

open class StackTraceElement: JavaObject, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.lang.StackTraceElement", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var StackTraceElementJNIClass: jclass?

    /// private java.lang.String java.lang.StackTraceElement.declaringClass

    /// private java.lang.String java.lang.StackTraceElement.methodName

    /// private java.lang.String java.lang.StackTraceElement.fileName

    /// private int java.lang.StackTraceElement.lineNumber

    /// private static final long java.lang.StackTraceElement.serialVersionUID

    /// public java.lang.StackTraceElement(java.lang.String,java.lang.String,java.lang.String,int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: String?, arg1: String?, arg2: String?, arg3: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/StackTraceElement", classCache: &StackTraceElement.StackTraceElementJNIClass, methodSig: "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V", methodCache: &StackTraceElement.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String?, _ _arg1: String?, _ _arg2: String?, _ _arg3: Int ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public boolean java.lang.StackTraceElement.equals(java.lang.Object)

    /// public java.lang.String java.lang.StackTraceElement.toString()

    /// public int java.lang.StackTraceElement.hashCode()

    /// public java.lang.String java.lang.StackTraceElement.getFileName()

    private static var getFileName_MethodID_2: jmethodID?

    open func getFileName() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFileName", methodSig: "()Ljava/lang/String;", methodCache: &StackTraceElement.getFileName_MethodID_2, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }


    /// public int java.lang.StackTraceElement.getLineNumber()

    private static var getLineNumber_MethodID_3: jmethodID?

    open func getLineNumber() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getLineNumber", methodSig: "()I", methodCache: &StackTraceElement.getLineNumber_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public java.lang.String java.lang.StackTraceElement.getClassName()

    private static var getClassName_MethodID_4: jmethodID?

    open func getClassName() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getClassName", methodSig: "()Ljava/lang/String;", methodCache: &StackTraceElement.getClassName_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }


    /// public java.lang.String java.lang.StackTraceElement.getMethodName()

    private static var getMethodName_MethodID_5: jmethodID?

    open func getMethodName() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getMethodName", methodSig: "()Ljava/lang/String;", methodCache: &StackTraceElement.getMethodName_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }


    /// public boolean java.lang.StackTraceElement.isNativeMethod()

    private static var isNativeMethod_MethodID_6: jmethodID?

    open func isNativeMethod() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isNativeMethod", methodSig: "()Z", methodCache: &StackTraceElement.isNativeMethod_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// private static boolean java.lang.StackTraceElement.eq(java.lang.Object,java.lang.Object)

}
