
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:03 GMT 2016 ///

/// interface java.lang.instrument.ClassFileTransformer ///

public protocol ClassFileTransformer: JavaProtocol {

    /// public abstract byte[] java.lang.instrument.ClassFileTransformer.transform(java.lang.ClassLoader,java.lang.String,java.lang.Class,java.security.ProtectionDomain,byte[]) throws java.lang.instrument.IllegalClassFormatException

    func transform( arg0: ClassLoader?, arg1: String?, arg2: Class?, arg3: /* java.security.ProtectionDomain */ UnclassedObject?, arg4: [Int8]? ) throws /* java.lang.instrument.IllegalClassFormatException */ -> [Int8]!
    func transform( _ _arg0: ClassLoader?, _ _arg1: String?, _ _arg2: Class?, _ _arg3: /* java.security.ProtectionDomain */ UnclassedObject?, _ _arg4: [Int8]? ) throws /* java.lang.instrument.IllegalClassFormatException */ -> [Int8]!

}

open class ClassFileTransformerForward: JNIObjectForward, ClassFileTransformer {

    private static var ClassFileTransformerJNIClass: jclass?

    /// public abstract byte[] java.lang.instrument.ClassFileTransformer.transform(java.lang.ClassLoader,java.lang.String,java.lang.Class,java.security.ProtectionDomain,byte[]) throws java.lang.instrument.IllegalClassFormatException

    private static var transform_MethodID_2: jmethodID?

    open func transform( arg0: ClassLoader?, arg1: String?, arg2: Class?, arg3: /* java.security.ProtectionDomain */ UnclassedObject?, arg4: [Int8]? ) throws /* java.lang.instrument.IllegalClassFormatException */ -> [Int8]! {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "transform", methodSig: "(Ljava/lang/ClassLoader;Ljava/lang/String;Ljava/lang/Class;Ljava/security/ProtectionDomain;[B)[B", methodCache: &ClassFileTransformerForward.transform_MethodID_2, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw IllegalClassFormatException( javaObject: throwable )
        }
        return JNIType.decode( type: [Int8](), from: __return )
    }

    open func transform( _ _arg0: ClassLoader?, _ _arg1: String?, _ _arg2: Class?, _ _arg3: /* java.security.ProtectionDomain */ UnclassedObject?, _ _arg4: [Int8]? ) throws /* java.lang.instrument.IllegalClassFormatException */ -> [Int8]! {
        return try transform( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

}


