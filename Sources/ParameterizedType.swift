
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:06 GMT 2016 ///

/// interface java.lang.reflect.ParameterizedType ///

public protocol ParameterizedType: Type {

    /// public abstract java.lang.reflect.Type[] java.lang.reflect.ParameterizedType.getActualTypeArguments()

    func getActualTypeArguments() -> [Type]!

    /// public abstract java.lang.reflect.Type java.lang.reflect.ParameterizedType.getRawType()

    func getRawType() -> Type!

    /// public abstract java.lang.reflect.Type java.lang.reflect.ParameterizedType.getOwnerType()

    func getOwnerType() -> Type!

}

open class ParameterizedTypeForward: TypeForward, ParameterizedType {

    private static var ParameterizedTypeJNIClass: jclass?

    /// public abstract java.lang.reflect.Type[] java.lang.reflect.ParameterizedType.getActualTypeArguments()

    private static var getActualTypeArguments_MethodID_4: jmethodID?

    open func getActualTypeArguments() -> [Type]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getActualTypeArguments", methodSig: "()[Ljava/lang/reflect/Type;", methodCache: &ParameterizedTypeForward.getActualTypeArguments_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: [TypeForward](), from: __return )
    }


    /// public abstract java.lang.reflect.Type java.lang.reflect.ParameterizedType.getRawType()

    private static var getRawType_MethodID_5: jmethodID?

    open func getRawType() -> Type! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getRawType", methodSig: "()Ljava/lang/reflect/Type;", methodCache: &ParameterizedTypeForward.getRawType_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TypeForward( javaObject: __return ) : nil
    }


    /// public abstract java.lang.reflect.Type java.lang.reflect.ParameterizedType.getOwnerType()

    private static var getOwnerType_MethodID_6: jmethodID?

    open func getOwnerType() -> Type! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getOwnerType", methodSig: "()Ljava/lang/reflect/Type;", methodCache: &ParameterizedTypeForward.getOwnerType_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TypeForward( javaObject: __return ) : nil
    }


}


