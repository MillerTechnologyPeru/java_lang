
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:25 GMT 2016 ///

/// class java.lang.reflect.Constructor ///

open class Constructor: AccessibleObject, GenericDeclaration, Member {

    public convenience init?( casting object: JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.lang.reflect.Constructor", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ConstructorJNIClass: jclass?

    /// private java.lang.Class java.lang.reflect.Constructor.clazz

    /// private int java.lang.reflect.Constructor.slot

    /// private java.lang.Class[] java.lang.reflect.Constructor.parameterTypes

    /// private java.lang.Class[] java.lang.reflect.Constructor.exceptionTypes

    /// private int java.lang.reflect.Constructor.modifiers

    /// private transient java.lang.String java.lang.reflect.Constructor.signature

    /// private transient sun.reflect.generics.repository.ConstructorRepository java.lang.reflect.Constructor.genericInfo

    /// private byte[] java.lang.reflect.Constructor.annotations

    /// private byte[] java.lang.reflect.Constructor.parameterAnnotations

    /// private volatile java.lang.Class java.lang.reflect.Constructor.securityCheckCache

    /// private static final int java.lang.reflect.Constructor.LANGUAGE_MODIFIERS

    /// private volatile sun.reflect.ConstructorAccessor java.lang.reflect.Constructor.constructorAccessor

    /// private java.lang.reflect.Constructor java.lang.reflect.Constructor.root

    /// private transient java.util.Map java.lang.reflect.Constructor.declaredAnnotations

    /// private static final java.security.Permission java.lang.reflect.AccessibleObject.ACCESS_PERMISSION

    /// boolean java.lang.reflect.AccessibleObject.override

    /// static final sun.reflect.ReflectionFactory java.lang.reflect.AccessibleObject.reflectionFactory

    /// public static final int java.lang.reflect.Member.PUBLIC

    private static var PUBLIC_FieldID: jfieldID?

    open static var PUBLIC: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "PUBLIC", fieldType: "I", fieldCache: &PUBLIC_FieldID, className: "java/lang/reflect/Constructor", classCache: &ConstructorJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.lang.reflect.Member.DECLARED

    private static var DECLARED_FieldID: jfieldID?

    open static var DECLARED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "DECLARED", fieldType: "I", fieldCache: &DECLARED_FieldID, className: "java/lang/reflect/Constructor", classCache: &ConstructorJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// java.lang.reflect.Constructor(java.lang.Class,java.lang.Class[],java.lang.Class[],int,int,java.lang.String,byte[],byte[])

    /// public boolean java.lang.reflect.Constructor.equals(java.lang.Object)

    /// public java.lang.String java.lang.reflect.Constructor.toString()

    /// public int java.lang.reflect.Constructor.hashCode()

    /// public int java.lang.reflect.Constructor.getModifiers()

    private static var getModifiers_MethodID_1: jmethodID?

    open func getModifiers() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getModifiers", methodSig: "()I", methodCache: &Constructor.getModifiers_MethodID_1, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public java.lang.String java.lang.reflect.Constructor.getName()

    private static var getName_MethodID_2: jmethodID?

    open func getName() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getName", methodSig: "()Ljava/lang/String;", methodCache: &Constructor.getName_MethodID_2, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }


    /// private synchronized java.util.Map java.lang.reflect.Constructor.declaredAnnotations()

    /// public java.lang.Object java.lang.reflect.Constructor.newInstance(java.lang.Object[]) throws java.lang.InstantiationException,java.lang.IllegalAccessException,java.lang.IllegalArgumentException,java.lang.reflect.InvocationTargetException

    private static var newInstance_MethodID_3: jmethodID?

    open func newInstance( arg0: [JavaObject]? ) throws /* java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException */ -> JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "newInstance", methodSig: "([Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &Constructor.newInstance_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw InstantiationException( javaObject: throwable )
        }
        return __return != nil ? JavaObject( javaObject: __return ) : nil
    }

    open func newInstance( _ _arg0: [JavaObject]? ) throws /* java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException */ -> JavaObject! {
        return try newInstance( arg0: _arg0 )
    }

    /// public boolean java.lang.reflect.Constructor.isSynthetic()

    private static var isSynthetic_MethodID_4: jmethodID?

    open func isSynthetic() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isSynthetic", methodSig: "()Z", methodCache: &Constructor.isSynthetic_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public java.lang.reflect.TypeVariable[] java.lang.reflect.Constructor.getTypeParameters()

    private static var getTypeParameters_MethodID_5: jmethodID?

    open func getTypeParameters() -> [TypeVariable]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTypeParameters", methodSig: "()[Ljava/lang/reflect/TypeVariable;", methodCache: &Constructor.getTypeParameters_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.decode( type: [TypeVariableForward](), from: __return )
    }


    /// public java.lang.Class java.lang.reflect.Constructor.getDeclaringClass()

    private static var getDeclaringClass_MethodID_6: jmethodID?

    open func getDeclaringClass() -> Class! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDeclaringClass", methodSig: "()Ljava/lang/Class;", methodCache: &Constructor.getDeclaringClass_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Class( javaObject: __return ) : nil
    }


    /// private sun.reflect.generics.factory.GenericsFactory java.lang.reflect.Constructor.getFactory()

    /// private sun.reflect.generics.repository.ConstructorRepository java.lang.reflect.Constructor.getGenericInfo()

    /// byte[] java.lang.reflect.Constructor.getRawAnnotations()

    /// public java.lang.annotation.Annotation java.lang.reflect.Constructor.getAnnotation(java.lang.Class)

    /// public java.lang.annotation.Annotation[] java.lang.reflect.Constructor.getDeclaredAnnotations()

    /// public java.lang.Class[] java.lang.reflect.Constructor.getParameterTypes()

    private static var getParameterTypes_MethodID_7: jmethodID?

    open func getParameterTypes() -> [Class]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getParameterTypes", methodSig: "()[Ljava/lang/Class;", methodCache: &Constructor.getParameterTypes_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Class](), from: __return )
    }


    /// java.lang.reflect.Constructor java.lang.reflect.Constructor.copy()

    /// public java.lang.String java.lang.reflect.Constructor.toGenericString()

    private static var toGenericString_MethodID_8: jmethodID?

    open func toGenericString() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "toGenericString", methodSig: "()Ljava/lang/String;", methodCache: &Constructor.toGenericString_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }


    /// public java.lang.reflect.Type[] java.lang.reflect.Constructor.getGenericParameterTypes()

    private static var getGenericParameterTypes_MethodID_9: jmethodID?

    open func getGenericParameterTypes() -> [Type]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getGenericParameterTypes", methodSig: "()[Ljava/lang/reflect/Type;", methodCache: &Constructor.getGenericParameterTypes_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.decode( type: [TypeForward](), from: __return )
    }


    /// public java.lang.Class[] java.lang.reflect.Constructor.getExceptionTypes()

    private static var getExceptionTypes_MethodID_10: jmethodID?

    open func getExceptionTypes() -> [Class]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getExceptionTypes", methodSig: "()[Ljava/lang/Class;", methodCache: &Constructor.getExceptionTypes_MethodID_10, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Class](), from: __return )
    }


    /// public java.lang.reflect.Type[] java.lang.reflect.Constructor.getGenericExceptionTypes()

    private static var getGenericExceptionTypes_MethodID_11: jmethodID?

    open func getGenericExceptionTypes() -> [Type]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getGenericExceptionTypes", methodSig: "()[Ljava/lang/reflect/Type;", methodCache: &Constructor.getGenericExceptionTypes_MethodID_11, args: &__args, locals: &__locals )
        return JNIType.decode( type: [TypeForward](), from: __return )
    }


    /// public boolean java.lang.reflect.Constructor.isVarArgs()

    private static var isVarArgs_MethodID_12: jmethodID?

    open func isVarArgs() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isVarArgs", methodSig: "()Z", methodCache: &Constructor.isVarArgs_MethodID_12, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public java.lang.annotation.Annotation[][] java.lang.reflect.Constructor.getParameterAnnotations()

    private static var getParameterAnnotations_MethodID_13: jmethodID?

    open func getParameterAnnotations() -> [[Annotation]]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getParameterAnnotations", methodSig: "()[[Ljava/lang/annotation/Annotation;", methodCache: &Constructor.getParameterAnnotations_MethodID_13, args: &__args, locals: &__locals )
        return JNIType.decode( type: [[Annotation]](), from: __return )
    }


    /// private void java.lang.reflect.Constructor.acquireConstructorAccessor()

    /// sun.reflect.ConstructorAccessor java.lang.reflect.Constructor.getConstructorAccessor()

    /// void java.lang.reflect.Constructor.setConstructorAccessor(sun.reflect.ConstructorAccessor)

    /// int java.lang.reflect.Constructor.getSlot()

    /// java.lang.String java.lang.reflect.Constructor.getSignature()

    /// byte[] java.lang.reflect.Constructor.getRawParameterAnnotations()

}
