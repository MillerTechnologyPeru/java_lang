
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:06 GMT 2016 ///

/// interface java.lang.reflect.InvocationHandler ///

public protocol InvocationHandler: JavaProtocol {

    /// public abstract java.lang.Object java.lang.reflect.InvocationHandler.invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) throws java.lang.Throwable

    func invoke( arg0: JavaObject?, arg1: Method?, arg2: [JavaObject]? ) throws /* java.lang.Throwable */ -> JavaObject!
    func invoke( _ _arg0: JavaObject?, _ _arg1: Method?, _ _arg2: [JavaObject]? ) throws /* java.lang.Throwable */ -> JavaObject!

}

open class InvocationHandlerForward: JNIObjectForward, InvocationHandler {

    private static var InvocationHandlerJNIClass: jclass?

    /// public abstract java.lang.Object java.lang.reflect.InvocationHandler.invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) throws java.lang.Throwable

    private static var invoke_MethodID_2: jmethodID?

    open func invoke( arg0: JavaObject?, arg1: Method?, arg2: [JavaObject]? ) throws /* java.lang.Throwable */ -> JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "invoke", methodSig: "(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &InvocationHandlerForward.invoke_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw Throwable( javaObject: throwable )
        }
        return __return != nil ? JavaObject( javaObject: __return ) : nil
    }

    open func invoke( _ _arg0: JavaObject?, _ _arg1: Method?, _ _arg2: [JavaObject]? ) throws /* java.lang.Throwable */ -> JavaObject! {
        return try invoke( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

}


private typealias InvocationHandler_invoke_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject?, _: jobject?, _: jobject? ) -> jobject?

private func InvocationHandler_invoke_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject?, _ arg1: jobject?, _ arg2: jobject? ) -> jobject? {
    let __return = try! InvocationHandlerBase.swiftObject( jniEnv: __env, javaObject: __this ).invoke( arg0 != nil ? JavaObject( javaObject: arg0 ) : nil, arg1 != nil ? Method( javaObject: arg1 ) : nil, JNIType.decode( type: [JavaObject](), from: arg2 ) )
    return JNIType.encode( value: __return, locals: nil ).l
}

open class InvocationHandlerBase: JNIObjectProxy, InvocationHandler {

    private static var nativesRegistered = false

    private static func registerNatives() {
        if ( !nativesRegistered ) {
            var natives = [JNINativeMethod]()

            let InvocationHandler_invoke_0_thunk: InvocationHandler_invoke_0_type = InvocationHandler_invoke_0
            natives.append( JNINativeMethod( name: strdup("__invoke"), signature: strdup("(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;"), fnPtr: unsafeBitCast( InvocationHandler_invoke_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

            withUnsafePointer(to: &natives[0]) {
                nativesPtr in
                let clazz = JNI.FindClass( "org/genie/java_lang/InvocationHandlerProxy" )
                if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                    JNI.report( "Unable to register java natives" )
                }
            }

            nativesRegistered = true
        }
    }

    public convenience init() {
        self.init( javaObject: nil )
    }

    public required init( javaObject: jobject? ) {
        super.init( javaObject: javaObject )
        InvocationHandlerBase.registerNatives()
        createProxy( javaClassName: "org/genie/java_lang/InvocationHandlerProxy" )
    }

    static func swiftObject( jniEnv: UnsafeMutablePointer<JNIEnv?>?, javaObject: jobject? ) -> InvocationHandlerBase {
        return unsafeBitCast( swiftPointer( jniEnv: jniEnv, object: javaObject ), to: InvocationHandlerBase.self )
    }

    /// public abstract java.lang.Object java.lang.reflect.InvocationHandler.invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) throws java.lang.Throwable

    open func invoke( arg0: JavaObject?, arg1: Method?, arg2: [JavaObject]? ) throws /* java.lang.Throwable */ -> JavaObject! /**/ {
        return nil
    }

    open func invoke( _ _arg0: JavaObject?, _ _arg1: Method?, _ _arg2: [JavaObject]? ) throws /* java.lang.Throwable */ -> JavaObject! /**/ {
        return try invoke( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

}
