
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:03 GMT 2016 ///

/// class java.lang.annotation.RetentionPolicy ///

open class RetentionPolicy: Enum {

    public convenience init?( casting object: JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.lang.annotation.RetentionPolicy", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var RetentionPolicyJNIClass: jclass?

    /// public static final java.lang.annotation.RetentionPolicy java.lang.annotation.RetentionPolicy.SOURCE

    private static var SOURCE_FieldID: jfieldID?

    open static var SOURCE: RetentionPolicy! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "SOURCE", fieldType: "Ljava/lang/annotation/RetentionPolicy;", fieldCache: &SOURCE_FieldID, className: "java/lang/annotation/RetentionPolicy", classCache: &RetentionPolicyJNIClass )
            return __value != nil ? RetentionPolicy( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.annotation.RetentionPolicy java.lang.annotation.RetentionPolicy.CLASS

    private static var CLASS_FieldID: jfieldID?

    open static var CLASS: RetentionPolicy! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "CLASS", fieldType: "Ljava/lang/annotation/RetentionPolicy;", fieldCache: &CLASS_FieldID, className: "java/lang/annotation/RetentionPolicy", classCache: &RetentionPolicyJNIClass )
            return __value != nil ? RetentionPolicy( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.annotation.RetentionPolicy java.lang.annotation.RetentionPolicy.RUNTIME

    private static var RUNTIME_FieldID: jfieldID?

    open static var RUNTIME: RetentionPolicy! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "RUNTIME", fieldType: "Ljava/lang/annotation/RetentionPolicy;", fieldCache: &RUNTIME_FieldID, className: "java/lang/annotation/RetentionPolicy", classCache: &RetentionPolicyJNIClass )
            return __value != nil ? RetentionPolicy( javaObject: __value ) : nil
        }
    }

    /// private static final java.lang.annotation.RetentionPolicy[] java.lang.annotation.RetentionPolicy.$VALUES

    /// private final java.lang.String java.lang.Enum.name

    /// private final int java.lang.Enum.ordinal

    /// private java.lang.annotation.RetentionPolicy(java.lang.String,int)

    /// public static java.lang.annotation.RetentionPolicy[] java.lang.annotation.RetentionPolicy.values()

    private static var values_MethodID_1: jmethodID?

    open class func values() -> [RetentionPolicy]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/annotation/RetentionPolicy", classCache: &RetentionPolicyJNIClass, methodName: "values", methodSig: "()[Ljava/lang/annotation/RetentionPolicy;", methodCache: &values_MethodID_1, args: &__args, locals: &__locals )
        return JNIType.decode( type: [RetentionPolicy](), from: __return )
    }


    /// public static java.lang.annotation.RetentionPolicy java.lang.annotation.RetentionPolicy.valueOf(java.lang.String)

    private static var valueOf_MethodID_2: jmethodID?

    open class func valueOf( arg0: String? ) -> RetentionPolicy! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/annotation/RetentionPolicy", classCache: &RetentionPolicyJNIClass, methodName: "valueOf", methodSig: "(Ljava/lang/String;)Ljava/lang/annotation/RetentionPolicy;", methodCache: &valueOf_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? RetentionPolicy( javaObject: __return ) : nil
    }

    open class func valueOf( _ _arg0: String? ) -> RetentionPolicy! {
        return valueOf( arg0: _arg0 )
    }

}
