
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:03 GMT 2016 ///

/// class java.lang.instrument.ClassDefinition ///

open class ClassDefinition: JavaObject {

    public convenience init?( casting object: JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.lang.instrument.ClassDefinition", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ClassDefinitionJNIClass: jclass?

    /// private final java.lang.Class java.lang.instrument.ClassDefinition.mClass

    /// private final byte[] java.lang.instrument.ClassDefinition.mClassFile

    /// public java.lang.instrument.ClassDefinition(java.lang.Class,byte[])

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Class?, arg1: [Int8]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/instrument/ClassDefinition", classCache: &ClassDefinition.ClassDefinitionJNIClass, methodSig: "(Ljava/lang/Class;[B)V", methodCache: &ClassDefinition.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Class?, _ _arg1: [Int8]? ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.lang.Class java.lang.instrument.ClassDefinition.getDefinitionClass()

    private static var getDefinitionClass_MethodID_2: jmethodID?

    open func getDefinitionClass() -> Class! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDefinitionClass", methodSig: "()Ljava/lang/Class;", methodCache: &ClassDefinition.getDefinitionClass_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Class( javaObject: __return ) : nil
    }


    /// public byte[] java.lang.instrument.ClassDefinition.getDefinitionClassFile()

    private static var getDefinitionClassFile_MethodID_3: jmethodID?

    open func getDefinitionClassFile() -> [Int8]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDefinitionClassFile", methodSig: "()[B", methodCache: &ClassDefinition.getDefinitionClassFile_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Int8](), from: __return )
    }


}
