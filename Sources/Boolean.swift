
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:14 GMT 2016 ///

/// class java.lang.Boolean ///

open class Boolean: JavaObject, /* java.io.Serializable */ UnclassedProtocol, JavaComparable {

    public convenience init?( casting object: JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.lang.Boolean", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var BooleanJNIClass: jclass?

    /// public static final java.lang.Boolean java.lang.Boolean.TRUE

    private static var TRUE_FieldID: jfieldID?

    open static var TRUE: Boolean! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "TRUE", fieldType: "Ljava/lang/Boolean;", fieldCache: &TRUE_FieldID, className: "java/lang/Boolean", classCache: &BooleanJNIClass )
            return __value != nil ? Boolean( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.Boolean java.lang.Boolean.FALSE

    private static var FALSE_FieldID: jfieldID?

    open static var FALSE: Boolean! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "FALSE", fieldType: "Ljava/lang/Boolean;", fieldCache: &FALSE_FieldID, className: "java/lang/Boolean", classCache: &BooleanJNIClass )
            return __value != nil ? Boolean( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.Class java.lang.Boolean.TYPE

    private static var TYPE_FieldID: jfieldID?

    open static var TYPE: Class! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "TYPE", fieldType: "Ljava/lang/Class;", fieldCache: &TYPE_FieldID, className: "java/lang/Boolean", classCache: &BooleanJNIClass )
            return __value != nil ? Class( javaObject: __value ) : nil
        }
    }

    /// private final boolean java.lang.Boolean.value

    /// private static final long java.lang.Boolean.serialVersionUID

    /// public java.lang.Boolean(boolean)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/Boolean", classCache: &Boolean.BooleanJNIClass, methodSig: "(Z)V", methodCache: &Boolean.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Bool ) {
        self.init( arg0: _arg0 )
    }

    /// public java.lang.Boolean(java.lang.String)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/Boolean", classCache: &Boolean.BooleanJNIClass, methodSig: "(Ljava/lang/String;)V", methodCache: &Boolean.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String? ) {
        self.init( arg0: _arg0 )
    }

    /// public boolean java.lang.Boolean.equals(java.lang.Object)

    /// public static java.lang.String java.lang.Boolean.toString(boolean)

    private static var toString_MethodID_3: jmethodID?

    open class func toString( arg0: Bool ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Boolean", classCache: &BooleanJNIClass, methodName: "toString", methodSig: "(Z)Ljava/lang/String;", methodCache: &toString_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }

    open class func toString( _ _arg0: Bool ) -> String! {
        return toString( arg0: _arg0 )
    }

    /// public java.lang.String java.lang.Boolean.toString()

    /// public int java.lang.Boolean.hashCode()

    /// public int java.lang.Boolean.compareTo(java.lang.Object)

    private static var compareTo_MethodID_4: jmethodID?

    open func compareTo( arg0: JavaObject? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "compareTo", methodSig: "(Ljava/lang/Object;)I", methodCache: &Boolean.compareTo_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func compareTo( _ _arg0: JavaObject? ) -> Int {
        return compareTo( arg0: _arg0 )
    }

    /// public int java.lang.Boolean.compareTo(java.lang.Boolean)

    private static var compareTo_MethodID_5: jmethodID?

    open func compareTo( arg0: Boolean? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "compareTo", methodSig: "(Ljava/lang/Boolean;)I", methodCache: &Boolean.compareTo_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func compareTo( _ _arg0: Boolean? ) -> Int {
        return compareTo( arg0: _arg0 )
    }

    /// public static boolean java.lang.Boolean.getBoolean(java.lang.String)

    private static var getBoolean_MethodID_6: jmethodID?

    open class func getBoolean( arg0: String? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Boolean", classCache: &BooleanJNIClass, methodName: "getBoolean", methodSig: "(Ljava/lang/String;)Z", methodCache: &getBoolean_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func getBoolean( _ _arg0: String? ) -> Bool {
        return getBoolean( arg0: _arg0 )
    }

    /// public boolean java.lang.Boolean.booleanValue()

    private static var booleanValue_MethodID_7: jmethodID?

    open func booleanValue() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "booleanValue", methodSig: "()Z", methodCache: &Boolean.booleanValue_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public static java.lang.Boolean java.lang.Boolean.valueOf(java.lang.String)

    private static var valueOf_MethodID_8: jmethodID?

    open class func valueOf( arg0: String? ) -> Boolean! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Boolean", classCache: &BooleanJNIClass, methodName: "valueOf", methodSig: "(Ljava/lang/String;)Ljava/lang/Boolean;", methodCache: &valueOf_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Boolean( javaObject: __return ) : nil
    }

    open class func valueOf( _ _arg0: String? ) -> Boolean! {
        return valueOf( arg0: _arg0 )
    }

    /// public static java.lang.Boolean java.lang.Boolean.valueOf(boolean)

    private static var valueOf_MethodID_9: jmethodID?

    open class func valueOf( arg0: Bool ) -> Boolean! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Boolean", classCache: &BooleanJNIClass, methodName: "valueOf", methodSig: "(Z)Ljava/lang/Boolean;", methodCache: &valueOf_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Boolean( javaObject: __return ) : nil
    }

    open class func valueOf( _ _arg0: Bool ) -> Boolean! {
        return valueOf( arg0: _arg0 )
    }

    /// public static boolean java.lang.Boolean.parseBoolean(java.lang.String)

    private static var parseBoolean_MethodID_10: jmethodID?

    open class func parseBoolean( arg0: String? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Boolean", classCache: &BooleanJNIClass, methodName: "parseBoolean", methodSig: "(Ljava/lang/String;)Z", methodCache: &parseBoolean_MethodID_10, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func parseBoolean( _ _arg0: String? ) -> Bool {
        return parseBoolean( arg0: _arg0 )
    }

    /// private static boolean java.lang.Boolean.toBoolean(java.lang.String)

}
