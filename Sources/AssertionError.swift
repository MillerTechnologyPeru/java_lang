
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:01 GMT 2016 ///

/// class java.lang.AssertionError ///

open class AssertionError: JavaError {

    public convenience init?( casting object: JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.lang.AssertionError", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AssertionErrorJNIClass: jclass?

    /// static final long java.lang.Error.serialVersionUID

    /// private static final long java.lang.Throwable.serialVersionUID

    /// private java.lang.String java.lang.Throwable.detailMessage

    /// private java.lang.Throwable java.lang.Throwable.cause

    /// private java.lang.StackTraceElement[] java.lang.Throwable.stackTrace

    /// public java.lang.AssertionError(double)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/AssertionError", classCache: &AssertionError.AssertionErrorJNIClass, methodSig: "(D)V", methodCache: &AssertionError.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Double ) {
        self.init( arg0: _arg0 )
    }

    /// private java.lang.AssertionError(java.lang.String)

    /// public java.lang.AssertionError(java.lang.Object)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: JavaObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/AssertionError", classCache: &AssertionError.AssertionErrorJNIClass, methodSig: "(Ljava/lang/Object;)V", methodCache: &AssertionError.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: JavaObject? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.lang.AssertionError(boolean)

    private static var new_MethodID_3: jmethodID?

    public convenience init( arg0: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/AssertionError", classCache: &AssertionError.AssertionErrorJNIClass, methodSig: "(Z)V", methodCache: &AssertionError.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Bool ) {
        self.init( arg0: _arg0 )
    }

    /// public java.lang.AssertionError(char)

    private static var new_MethodID_4: jmethodID?

    public convenience init( arg0: UInt16 ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/AssertionError", classCache: &AssertionError.AssertionErrorJNIClass, methodSig: "(C)V", methodCache: &AssertionError.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: UInt16 ) {
        self.init( arg0: _arg0 )
    }

    /// public java.lang.AssertionError(int)

    private static var new_MethodID_5: jmethodID?

    public convenience init( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/AssertionError", classCache: &AssertionError.AssertionErrorJNIClass, methodSig: "(I)V", methodCache: &AssertionError.new_MethodID_5, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int ) {
        self.init( arg0: _arg0 )
    }

    /// public java.lang.AssertionError(long)

    private static var new_MethodID_6: jmethodID?

    public convenience init( arg0: Int64 ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/AssertionError", classCache: &AssertionError.AssertionErrorJNIClass, methodSig: "(J)V", methodCache: &AssertionError.new_MethodID_6, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int64 ) {
        self.init( arg0: _arg0 )
    }

    /// public java.lang.AssertionError(float)

    private static var new_MethodID_7: jmethodID?

    public convenience init( arg0: Float ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/AssertionError", classCache: &AssertionError.AssertionErrorJNIClass, methodSig: "(F)V", methodCache: &AssertionError.new_MethodID_7, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Float ) {
        self.init( arg0: _arg0 )
    }

    /// public java.lang.AssertionError()

    private static var new_MethodID_8: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/lang/AssertionError", classCache: &AssertionError.AssertionErrorJNIClass, methodSig: "()V", methodCache: &AssertionError.new_MethodID_8, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

}
