
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.lang.StringBuffer ///

open class StringBuffer: /* java.lang.AbstractStringBuilder */ UnclassedObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var StringBufferJNIClass: jclass?

    /// private transient char[] java.lang.StringBuffer.toStringCache

    /// static final long java.lang.StringBuffer.serialVersionUID

    /// private static final java.io.ObjectStreamField[] java.lang.StringBuffer.serialPersistentFields

    /// char[] java.lang.AbstractStringBuilder.value

    /// int java.lang.AbstractStringBuilder.count

    /// public java.lang.StringBuffer(java.lang.CharSequence)

    private static var new_MethodID_1: jmethodID?

    public convenience init( seq: CharSequence? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: seq, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/StringBuffer", classCache: &StringBuffer.StringBufferJNIClass, methodSig: "(Ljava/lang/CharSequence;)V", methodCache: &StringBuffer.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _seq: CharSequence? ) {
        self.init( seq: _seq )
    }

    /// public java.lang.StringBuffer(java.lang.String)

    private static var new_MethodID_2: jmethodID?

    public convenience init( str: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: str, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/StringBuffer", classCache: &StringBuffer.StringBufferJNIClass, methodSig: "(Ljava/lang/String;)V", methodCache: &StringBuffer.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _str: String? ) {
        self.init( str: _str )
    }

    /// public java.lang.StringBuffer(int)

    private static var new_MethodID_3: jmethodID?

    public convenience init( capacity: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: capacity, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/StringBuffer", classCache: &StringBuffer.StringBufferJNIClass, methodSig: "(I)V", methodCache: &StringBuffer.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _capacity: Int ) {
        self.init( capacity: _capacity )
    }

    /// public java.lang.StringBuffer()

    private static var new_MethodID_4: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/lang/StringBuffer", classCache: &StringBuffer.StringBufferJNIClass, methodSig: "()V", methodCache: &StringBuffer.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public synchronized java.lang.String java.lang.StringBuffer.toString()

    /// public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(float)

    /// public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(double)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuffer.append(java.lang.CharSequence)

    /// java.lang.AbstractStringBuilder java.lang.StringBuffer.append(java.lang.AbstractStringBuilder)

    /// public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(boolean)

    /// public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(char)

    /// public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(int)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuffer.append(java.lang.StringBuffer)

    /// public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(long)

    private static var append_MethodID_5: jmethodID?

    open func append( lng: Int64 ) -> StringBuffer! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: lng, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "append", methodSig: "(J)Ljava/lang/StringBuffer;", methodCache: &StringBuffer.append_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? StringBuffer( javaObject: __return ) : nil
    }

    open func append( _ _lng: Int64 ) -> StringBuffer! {
        return append( lng: _lng )
    }

    /// public java.lang.AbstractStringBuilder java.lang.StringBuffer.append(char)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuffer.append(int)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuffer.append(long)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuffer.append(float)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuffer.append(double)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuffer.append(java.lang.CharSequence,int,int)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuffer.append(char[])

    /// public java.lang.AbstractStringBuilder java.lang.StringBuffer.append(char[],int,int)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuffer.append(boolean)

    /// public java.lang.Appendable java.lang.StringBuffer.append(java.lang.CharSequence) throws java.io.IOException

    /// public java.lang.AbstractStringBuilder java.lang.StringBuffer.append(java.lang.String)

    /// public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.Object)

    /// public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.String)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuffer.append(java.lang.Object)

    /// public java.lang.Appendable java.lang.StringBuffer.append(char) throws java.io.IOException

    /// public java.lang.Appendable java.lang.StringBuffer.append(java.lang.CharSequence,int,int) throws java.io.IOException

    /// public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.CharSequence)

    /// public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.CharSequence,int,int)

    /// public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(char[])

    /// public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.StringBuffer)

    /// synchronized java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.AbstractStringBuilder)

    /// public synchronized java.lang.StringBuffer java.lang.StringBuffer.append(char[],int,int)

    /// public int java.lang.StringBuffer.indexOf(java.lang.String)

    /// public synchronized int java.lang.StringBuffer.indexOf(java.lang.String,int)

    /// public synchronized int java.lang.StringBuffer.length()

    /// public synchronized char java.lang.StringBuffer.charAt(int)

    /// public synchronized int java.lang.StringBuffer.codePointAt(int)

    /// public synchronized int java.lang.StringBuffer.codePointBefore(int)

    /// public synchronized int java.lang.StringBuffer.codePointCount(int,int)

    /// public synchronized int java.lang.StringBuffer.offsetByCodePoints(int,int)

    /// public synchronized void java.lang.StringBuffer.getChars(int,int,char[],int)

    /// public synchronized int java.lang.StringBuffer.lastIndexOf(java.lang.String,int)

    /// public int java.lang.StringBuffer.lastIndexOf(java.lang.String)

    /// public synchronized java.lang.String java.lang.StringBuffer.substring(int)

    /// public synchronized java.lang.String java.lang.StringBuffer.substring(int,int)

    /// public synchronized java.lang.CharSequence java.lang.StringBuffer.subSequence(int,int)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuffer.replace(int,int,java.lang.String)

    /// public synchronized java.lang.StringBuffer java.lang.StringBuffer.replace(int,int,java.lang.String)

    /// private void java.lang.StringBuffer.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException

    /// private synchronized void java.lang.StringBuffer.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

    /// public java.lang.AbstractStringBuilder java.lang.StringBuffer.delete(int,int)

    /// public synchronized java.lang.StringBuffer java.lang.StringBuffer.delete(int,int)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuffer.insert(int,char[])

    /// public java.lang.AbstractStringBuilder java.lang.StringBuffer.insert(int,java.lang.CharSequence)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuffer.insert(int,java.lang.CharSequence,int,int)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuffer.insert(int,boolean)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuffer.insert(int,java.lang.String)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuffer.insert(int,java.lang.Object)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuffer.insert(int,char[],int,int)

    /// public java.lang.StringBuffer java.lang.StringBuffer.insert(int,java.lang.CharSequence)

    /// public synchronized java.lang.StringBuffer java.lang.StringBuffer.insert(int,java.lang.CharSequence,int,int)

    /// public java.lang.StringBuffer java.lang.StringBuffer.insert(int,boolean)

    /// public synchronized java.lang.StringBuffer java.lang.StringBuffer.insert(int,char)

    /// public java.lang.StringBuffer java.lang.StringBuffer.insert(int,int)

    /// public java.lang.StringBuffer java.lang.StringBuffer.insert(int,float)

    /// public java.lang.StringBuffer java.lang.StringBuffer.insert(int,double)

    /// public synchronized java.lang.StringBuffer java.lang.StringBuffer.insert(int,char[],int,int)

    /// public synchronized java.lang.StringBuffer java.lang.StringBuffer.insert(int,java.lang.Object)

    /// public synchronized java.lang.StringBuffer java.lang.StringBuffer.insert(int,java.lang.String)

    /// public synchronized java.lang.StringBuffer java.lang.StringBuffer.insert(int,char[])

    /// public java.lang.AbstractStringBuilder java.lang.StringBuffer.insert(int,double)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuffer.insert(int,float)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuffer.insert(int,long)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuffer.insert(int,int)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuffer.insert(int,char)

    /// public java.lang.StringBuffer java.lang.StringBuffer.insert(int,long)

    /// public synchronized int java.lang.StringBuffer.capacity()

    /// public synchronized void java.lang.StringBuffer.ensureCapacity(int)

    /// public synchronized void java.lang.StringBuffer.trimToSize()

    /// public synchronized void java.lang.StringBuffer.setLength(int)

    /// public synchronized void java.lang.StringBuffer.setCharAt(int,char)

    /// public synchronized java.lang.StringBuffer java.lang.StringBuffer.appendCodePoint(int)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuffer.appendCodePoint(int)

    /// public java.lang.AbstractStringBuilder java.lang.StringBuffer.deleteCharAt(int)

    /// public synchronized java.lang.StringBuffer java.lang.StringBuffer.deleteCharAt(int)

    /// public synchronized java.lang.StringBuffer java.lang.StringBuffer.reverse()

    /// public java.lang.AbstractStringBuilder java.lang.StringBuffer.reverse()

    /// In declared protocol but not defined.. ///

    /// public abstract char java.lang.CharSequence.charAt(int)

    private static var charAt_MethodID_6: jmethodID?

    open func charAt( arg0: Int ) -> UInt16 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallCharMethod( object: javaObject, methodName: "charAt", methodSig: "(I)C", methodCache: &StringBuffer.charAt_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: UInt16(), from: __return )
    }

    open func charAt( _ _arg0: Int ) -> UInt16 {
        return charAt( arg0: _arg0 )
    }

    /// public abstract java.lang.CharSequence java.lang.CharSequence.subSequence(int,int)

    private static var subSequence_MethodID_7: jmethodID?

    open func subSequence( arg0: Int, arg1: Int ) -> CharSequence! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "subSequence", methodSig: "(II)Ljava/lang/CharSequence;", methodCache: &StringBuffer.subSequence_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? CharSequenceForward( javaObject: __return ) : nil
    }

    open func subSequence( _ _arg0: Int, _ _arg1: Int ) -> CharSequence! {
        return subSequence( arg0: _arg0, arg1: _arg1 )
    }

    /// public default java.util.stream.IntStream java.lang.CharSequence.chars()

    /// public abstract java.lang.String java.lang.CharSequence.toString()

    /// public abstract int java.lang.CharSequence.length()

    /// public default java.util.stream.IntStream java.lang.CharSequence.codePoints()

}

