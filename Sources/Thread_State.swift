
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:02 GMT 2016 ///

/// class java.lang.Thread$State ///

open class Thread_State: Enum {

    public convenience init?( casting object: JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.lang.Thread$State", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var Thread_StateJNIClass: jclass?

    /// public static final java.lang.Thread$State java.lang.Thread$State.NEW

    private static var NEW_FieldID: jfieldID?

    open static var NEW: Thread_State! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "NEW", fieldType: "Ljava/lang/Thread$State;", fieldCache: &NEW_FieldID, className: "java/lang/Thread$State", classCache: &Thread_StateJNIClass )
            return __value != nil ? Thread_State( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.Thread$State java.lang.Thread$State.RUNNABLE

    private static var RUNNABLE_FieldID: jfieldID?

    open static var RUNNABLE: Thread_State! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "RUNNABLE", fieldType: "Ljava/lang/Thread$State;", fieldCache: &RUNNABLE_FieldID, className: "java/lang/Thread$State", classCache: &Thread_StateJNIClass )
            return __value != nil ? Thread_State( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.Thread$State java.lang.Thread$State.BLOCKED

    private static var BLOCKED_FieldID: jfieldID?

    open static var BLOCKED: Thread_State! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "BLOCKED", fieldType: "Ljava/lang/Thread$State;", fieldCache: &BLOCKED_FieldID, className: "java/lang/Thread$State", classCache: &Thread_StateJNIClass )
            return __value != nil ? Thread_State( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.Thread$State java.lang.Thread$State.WAITING

    private static var WAITING_FieldID: jfieldID?

    open static var WAITING: Thread_State! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "WAITING", fieldType: "Ljava/lang/Thread$State;", fieldCache: &WAITING_FieldID, className: "java/lang/Thread$State", classCache: &Thread_StateJNIClass )
            return __value != nil ? Thread_State( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.Thread$State java.lang.Thread$State.TIMED_WAITING

    private static var TIMED_WAITING_FieldID: jfieldID?

    open static var TIMED_WAITING: Thread_State! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "TIMED_WAITING", fieldType: "Ljava/lang/Thread$State;", fieldCache: &TIMED_WAITING_FieldID, className: "java/lang/Thread$State", classCache: &Thread_StateJNIClass )
            return __value != nil ? Thread_State( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.Thread$State java.lang.Thread$State.TERMINATED

    private static var TERMINATED_FieldID: jfieldID?

    open static var TERMINATED: Thread_State! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "TERMINATED", fieldType: "Ljava/lang/Thread$State;", fieldCache: &TERMINATED_FieldID, className: "java/lang/Thread$State", classCache: &Thread_StateJNIClass )
            return __value != nil ? Thread_State( javaObject: __value ) : nil
        }
    }

    /// private static final java.lang.Thread$State[] java.lang.Thread$State.$VALUES

    /// private final java.lang.String java.lang.Enum.name

    /// private final int java.lang.Enum.ordinal

    /// private java.lang.Thread$State(java.lang.String,int)

    /// public static java.lang.Thread$State[] java.lang.Thread$State.values()

    private static var values_MethodID_1: jmethodID?

    open class func values() -> [Thread_State]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Thread$State", classCache: &Thread_StateJNIClass, methodName: "values", methodSig: "()[Ljava/lang/Thread$State;", methodCache: &values_MethodID_1, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Thread_State](), from: __return )
    }


    /// public static java.lang.Thread$State java.lang.Thread$State.valueOf(java.lang.String)

    private static var valueOf_MethodID_2: jmethodID?

    open class func valueOf( arg0: String? ) -> Thread_State! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Thread$State", classCache: &Thread_StateJNIClass, methodName: "valueOf", methodSig: "(Ljava/lang/String;)Ljava/lang/Thread$State;", methodCache: &valueOf_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Thread_State( javaObject: __return ) : nil
    }

    open class func valueOf( _ _arg0: String? ) -> Thread_State! {
        return valueOf( arg0: _arg0 )
    }

}
