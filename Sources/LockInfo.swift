
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:04 GMT 2016 ///

/// class java.lang.management.LockInfo ///

open class LockInfo: JavaObject {

    public convenience init?( casting object: JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.lang.management.LockInfo", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var LockInfoJNIClass: jclass?

    /// private java.lang.String java.lang.management.LockInfo.className

    /// private int java.lang.management.LockInfo.identityHashCode

    /// public java.lang.management.LockInfo(java.lang.String,int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: String?, arg1: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/management/LockInfo", classCache: &LockInfo.LockInfoJNIClass, methodSig: "(Ljava/lang/String;I)V", methodCache: &LockInfo.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String?, _ _arg1: Int ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// java.lang.management.LockInfo(java.lang.Object)

    /// public java.lang.String java.lang.management.LockInfo.toString()

    /// public java.lang.String java.lang.management.LockInfo.getClassName()

    private static var getClassName_MethodID_2: jmethodID?

    open func getClassName() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getClassName", methodSig: "()Ljava/lang/String;", methodCache: &LockInfo.getClassName_MethodID_2, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }


    /// public int java.lang.management.LockInfo.getIdentityHashCode()

    private static var getIdentityHashCode_MethodID_3: jmethodID?

    open func getIdentityHashCode() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getIdentityHashCode", methodSig: "()I", methodCache: &LockInfo.getIdentityHashCode_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


}
