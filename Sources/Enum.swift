
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.lang.Enum ///

open class Enum: java_swift.JavaObject, JavaComparable, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var EnumJNIClass: jclass?

    /// private final java.lang.String java.lang.Enum.name

    /// private final int java.lang.Enum.ordinal

    /// protected java.lang.Enum(java.lang.String,int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( name: String?, ordinal: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: name, locals: &__locals )
        __args[1] = JNIType.toJava( value: ordinal, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/Enum", classCache: &Enum.EnumJNIClass, methodSig: "(Ljava/lang/String;I)V", methodCache: &Enum.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _name: String?, _ _ordinal: Int ) {
        self.init( name: _name, ordinal: _ordinal )
    }

    /// public final java.lang.String java.lang.Enum.name()

    private static var name_MethodID_2: jmethodID?

    open func name() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "name", methodSig: "()Ljava/lang/String;", methodCache: &Enum.name_MethodID_2, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: String(), from: __return )
    }


    /// protected final void java.lang.Enum.finalize()

    private static var finalize_MethodID_3: jmethodID?

    override open func finalize() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "finalize", methodSig: "()V", methodCache: &Enum.finalize_MethodID_3, args: &__args, locals: &__locals )
    }


    /// public final boolean java.lang.Enum.equals(java.lang.Object)

    private static var equals_MethodID_4: jmethodID?

    open func equals( other: java_swift.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: other, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "equals", methodSig: "(Ljava/lang/Object;)Z", methodCache: &Enum.equals_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }

    override open func equals( _ _other: java_swift.JavaObject? ) -> Bool {
        return equals( other: _other )
    }

    /// public java.lang.String java.lang.Enum.toString()

    /// public final int java.lang.Enum.hashCode()

    /// protected final java.lang.Object java.lang.Enum.clone() throws java.lang.CloneNotSupportedException

    private static var clone_MethodID_5: jmethodID?

    override open func clone() throws /* java.lang.CloneNotSupportedException */ -> java_swift.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "clone", methodSig: "()Ljava/lang/Object;", methodCache: &Enum.clone_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw CloneNotSupportedException( javaObject: throwable )
        }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }


    /// public int java.lang.Enum.compareTo(java.lang.Object)

    private static var compareTo_MethodID_6: jmethodID?

    open func compareTo( arg0: java_swift.JavaObject? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "compareTo", methodSig: "(Ljava/lang/Object;)I", methodCache: &Enum.compareTo_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }

    open func compareTo( _ _arg0: java_swift.JavaObject? ) -> Int {
        return compareTo( arg0: _arg0 )
    }

    /// public final int java.lang.Enum.compareTo(java.lang.Enum)

    private static var compareTo_MethodID_7: jmethodID?

    open func compareTo( o: Enum? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: o, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "compareTo", methodSig: "(Ljava/lang/Enum;)I", methodCache: &Enum.compareTo_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }

    open func compareTo( _ _o: Enum? ) -> Int {
        return compareTo( o: _o )
    }

    /// public static java.lang.Enum java.lang.Enum.valueOf(java.lang.Class,java.lang.String)

    private static var valueOf_MethodID_8: jmethodID?

    open class func valueOf( enumType: java_swift.JavaClass?, name: String? ) -> Enum! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: enumType, locals: &__locals )
        __args[1] = JNIType.toJava( value: name, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Enum", classCache: &EnumJNIClass, methodName: "valueOf", methodSig: "(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;", methodCache: &valueOf_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Enum( javaObject: __return ) : nil
    }

    open class func valueOf( _ _enumType: java_swift.JavaClass?, _ _name: String? ) -> Enum! {
        return valueOf( enumType: _enumType, name: _name )
    }

    /// public final java.lang.Class java.lang.Enum.getDeclaringClass()

    private static var getDeclaringClass_MethodID_9: jmethodID?

    open func getDeclaringClass() -> java_swift.JavaClass! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDeclaringClass", methodSig: "()Ljava/lang/Class;", methodCache: &Enum.getDeclaringClass_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaClass( javaObject: __return ) : nil
    }


    /// private void java.lang.Enum.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException

    /// public final int java.lang.Enum.ordinal()

    private static var ordinal_MethodID_10: jmethodID?

    open func ordinal() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "ordinal", methodSig: "()I", methodCache: &Enum.ordinal_MethodID_10, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }


    /// private void java.lang.Enum.readObjectNoData() throws java.io.ObjectStreamException

}

