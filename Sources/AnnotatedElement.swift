
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:25 GMT 2016 ///

/// interface java.lang.reflect.AnnotatedElement ///

public protocol AnnotatedElement: JavaProtocol {

    /// public abstract java.lang.annotation.Annotation java.lang.reflect.AnnotatedElement.getAnnotation(java.lang.Class)

    func getAnnotation( arg0: Class? ) -> Annotation!
    func getAnnotation( _ _arg0: Class? ) -> Annotation!

    /// public abstract boolean java.lang.reflect.AnnotatedElement.isAnnotationPresent(java.lang.Class)

    func isAnnotationPresent( arg0: Class? ) -> Bool
    func isAnnotationPresent( _ _arg0: Class? ) -> Bool

    /// public abstract java.lang.annotation.Annotation[] java.lang.reflect.AnnotatedElement.getAnnotations()

    func getAnnotations() -> [Annotation]!

    /// public abstract java.lang.annotation.Annotation[] java.lang.reflect.AnnotatedElement.getDeclaredAnnotations()

    func getDeclaredAnnotations() -> [Annotation]!

}

open class AnnotatedElementForward: JNIObjectForward, AnnotatedElement {

    private static var AnnotatedElementJNIClass: jclass?

    /// public abstract java.lang.annotation.Annotation java.lang.reflect.AnnotatedElement.getAnnotation(java.lang.Class)

    private static var getAnnotation_MethodID_5: jmethodID?

    open func getAnnotation( arg0: Class? ) -> Annotation! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAnnotation", methodSig: "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;", methodCache: &AnnotatedElementForward.getAnnotation_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? AnnotationForward( javaObject: __return ) : nil
    }

    open func getAnnotation( _ _arg0: Class? ) -> Annotation! {
        return getAnnotation( arg0: _arg0 )
    }

    /// public abstract boolean java.lang.reflect.AnnotatedElement.isAnnotationPresent(java.lang.Class)

    private static var isAnnotationPresent_MethodID_6: jmethodID?

    open func isAnnotationPresent( arg0: Class? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isAnnotationPresent", methodSig: "(Ljava/lang/Class;)Z", methodCache: &AnnotatedElementForward.isAnnotationPresent_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func isAnnotationPresent( _ _arg0: Class? ) -> Bool {
        return isAnnotationPresent( arg0: _arg0 )
    }

    /// public abstract java.lang.annotation.Annotation[] java.lang.reflect.AnnotatedElement.getAnnotations()

    private static var getAnnotations_MethodID_7: jmethodID?

    open func getAnnotations() -> [Annotation]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAnnotations", methodSig: "()[Ljava/lang/annotation/Annotation;", methodCache: &AnnotatedElementForward.getAnnotations_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: [AnnotationForward](), from: __return )
    }


    /// public abstract java.lang.annotation.Annotation[] java.lang.reflect.AnnotatedElement.getDeclaredAnnotations()

    private static var getDeclaredAnnotations_MethodID_8: jmethodID?

    open func getDeclaredAnnotations() -> [Annotation]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDeclaredAnnotations", methodSig: "()[Ljava/lang/annotation/Annotation;", methodCache: &AnnotatedElementForward.getDeclaredAnnotations_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.decode( type: [AnnotationForward](), from: __return )
    }


}


