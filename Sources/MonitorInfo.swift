
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:05 GMT 2016 ///

/// class java.lang.management.MonitorInfo ///

open class MonitorInfo: LockInfo {

    public convenience init?( casting object: JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.lang.management.MonitorInfo", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var MonitorInfoJNIClass: jclass?

    /// private int java.lang.management.MonitorInfo.stackDepth

    /// private java.lang.StackTraceElement java.lang.management.MonitorInfo.stackFrame

    /// private java.lang.String java.lang.management.LockInfo.className

    /// private int java.lang.management.LockInfo.identityHashCode

    /// public java.lang.management.MonitorInfo(java.lang.String,int,int,java.lang.StackTraceElement)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: String?, arg1: Int, arg2: Int, arg3: StackTraceElement? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/management/MonitorInfo", classCache: &MonitorInfo.MonitorInfoJNIClass, methodSig: "(Ljava/lang/String;IILjava/lang/StackTraceElement;)V", methodCache: &MonitorInfo.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String?, _ _arg1: Int, _ _arg2: Int, _ _arg3: StackTraceElement? ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public static java.lang.management.MonitorInfo java.lang.management.MonitorInfo.from(javax.management.openmbean.CompositeData)

    private static var from_MethodID_2: jmethodID?

    open class func from( arg0: /* javax.management.openmbean.CompositeData */ UnclassedProtocol? ) -> MonitorInfo! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/management/MonitorInfo", classCache: &MonitorInfoJNIClass, methodName: "from", methodSig: "(Ljavax/management/openmbean/CompositeData;)Ljava/lang/management/MonitorInfo;", methodCache: &from_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? MonitorInfo( javaObject: __return ) : nil
    }

    open class func from( _ _arg0: /* javax.management.openmbean.CompositeData */ UnclassedProtocol? ) -> MonitorInfo! {
        return from( arg0: _arg0 )
    }

    /// public int java.lang.management.MonitorInfo.getLockedStackDepth()

    private static var getLockedStackDepth_MethodID_3: jmethodID?

    open func getLockedStackDepth() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getLockedStackDepth", methodSig: "()I", methodCache: &MonitorInfo.getLockedStackDepth_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public java.lang.StackTraceElement java.lang.management.MonitorInfo.getLockedStackFrame()

    private static var getLockedStackFrame_MethodID_4: jmethodID?

    open func getLockedStackFrame() -> StackTraceElement! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLockedStackFrame", methodSig: "()Ljava/lang/StackTraceElement;", methodCache: &MonitorInfo.getLockedStackFrame_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? StackTraceElement( javaObject: __return ) : nil
    }


}
