
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:02 GMT 2016 ///

/// class java.lang.Process ///

open class Process: JavaObject {

    public convenience init?( casting object: JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.lang.Process", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ProcessJNIClass: jclass?

    /// public java.lang.Process()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/lang/Process", classCache: &Process.ProcessJNIClass, methodSig: "()V", methodCache: &Process.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public abstract void java.lang.Process.destroy()

    private static var destroy_MethodID_2: jmethodID?

    open func destroy() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "destroy", methodSig: "()V", methodCache: &Process.destroy_MethodID_2, args: &__args, locals: &__locals )
    }


    /// public abstract java.io.InputStream java.lang.Process.getInputStream()

    private static var getInputStream_MethodID_3: jmethodID?

    open func getInputStream() -> /* java.io.InputStream */ UnclassedObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getInputStream", methodSig: "()Ljava/io/InputStream;", methodCache: &Process.getInputStream_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* java.io.InputStream */ UnclassedObject( javaObject: __return ) : nil
    }


    /// public abstract java.io.OutputStream java.lang.Process.getOutputStream()

    private static var getOutputStream_MethodID_4: jmethodID?

    open func getOutputStream() -> /* java.io.OutputStream */ UnclassedObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getOutputStream", methodSig: "()Ljava/io/OutputStream;", methodCache: &Process.getOutputStream_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* java.io.OutputStream */ UnclassedObject( javaObject: __return ) : nil
    }


    /// public abstract java.io.InputStream java.lang.Process.getErrorStream()

    private static var getErrorStream_MethodID_5: jmethodID?

    open func getErrorStream() -> /* java.io.InputStream */ UnclassedObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getErrorStream", methodSig: "()Ljava/io/InputStream;", methodCache: &Process.getErrorStream_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* java.io.InputStream */ UnclassedObject( javaObject: __return ) : nil
    }


    /// public abstract int java.lang.Process.waitFor() throws java.lang.InterruptedException

    private static var waitFor_MethodID_6: jmethodID?

    open func waitFor() throws /* java.lang.InterruptedException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "waitFor", methodSig: "()I", methodCache: &Process.waitFor_MethodID_6, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw InterruptedException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract int java.lang.Process.exitValue()

    private static var exitValue_MethodID_7: jmethodID?

    open func exitValue() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "exitValue", methodSig: "()I", methodCache: &Process.exitValue_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


}
