
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:13 GMT 2016 ///

/// class java.lang.Character ///

open class Character: JavaObject, /* java.io.Serializable */ UnclassedProtocol, JavaComparable {

    public convenience init?( casting object: JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.lang.Character", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var CharacterJNIClass: jclass?

    /// public static final int java.lang.Character.MIN_RADIX

    private static var MIN_RADIX_FieldID: jfieldID?

    open static var MIN_RADIX: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "MIN_RADIX", fieldType: "I", fieldCache: &MIN_RADIX_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.lang.Character.MAX_RADIX

    private static var MAX_RADIX_FieldID: jfieldID?

    open static var MAX_RADIX: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "MAX_RADIX", fieldType: "I", fieldCache: &MAX_RADIX_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final char java.lang.Character.MIN_VALUE

    private static var MIN_VALUE_FieldID: jfieldID?

    open static var MIN_VALUE: UInt16 {
        get {
            let __value = JNIField.GetStaticCharField( fieldName: "MIN_VALUE", fieldType: "C", fieldCache: &MIN_VALUE_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: UInt16(), from: __value )
        }
    }

    /// public static final char java.lang.Character.MAX_VALUE

    private static var MAX_VALUE_FieldID: jfieldID?

    open static var MAX_VALUE: UInt16 {
        get {
            let __value = JNIField.GetStaticCharField( fieldName: "MAX_VALUE", fieldType: "C", fieldCache: &MAX_VALUE_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: UInt16(), from: __value )
        }
    }

    /// public static final java.lang.Class java.lang.Character.TYPE

    private static var TYPE_FieldID: jfieldID?

    open static var TYPE: Class! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "TYPE", fieldType: "Ljava/lang/Class;", fieldCache: &TYPE_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return __value != nil ? Class( javaObject: __value ) : nil
        }
    }

    /// public static final byte java.lang.Character.UNASSIGNED

    private static var UNASSIGNED_FieldID: jfieldID?

    open static var UNASSIGNED: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "UNASSIGNED", fieldType: "B", fieldCache: &UNASSIGNED_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.UPPERCASE_LETTER

    private static var UPPERCASE_LETTER_FieldID: jfieldID?

    open static var UPPERCASE_LETTER: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "UPPERCASE_LETTER", fieldType: "B", fieldCache: &UPPERCASE_LETTER_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.LOWERCASE_LETTER

    private static var LOWERCASE_LETTER_FieldID: jfieldID?

    open static var LOWERCASE_LETTER: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "LOWERCASE_LETTER", fieldType: "B", fieldCache: &LOWERCASE_LETTER_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.TITLECASE_LETTER

    private static var TITLECASE_LETTER_FieldID: jfieldID?

    open static var TITLECASE_LETTER: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "TITLECASE_LETTER", fieldType: "B", fieldCache: &TITLECASE_LETTER_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.MODIFIER_LETTER

    private static var MODIFIER_LETTER_FieldID: jfieldID?

    open static var MODIFIER_LETTER: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "MODIFIER_LETTER", fieldType: "B", fieldCache: &MODIFIER_LETTER_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.OTHER_LETTER

    private static var OTHER_LETTER_FieldID: jfieldID?

    open static var OTHER_LETTER: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "OTHER_LETTER", fieldType: "B", fieldCache: &OTHER_LETTER_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.NON_SPACING_MARK

    private static var NON_SPACING_MARK_FieldID: jfieldID?

    open static var NON_SPACING_MARK: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "NON_SPACING_MARK", fieldType: "B", fieldCache: &NON_SPACING_MARK_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.ENCLOSING_MARK

    private static var ENCLOSING_MARK_FieldID: jfieldID?

    open static var ENCLOSING_MARK: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "ENCLOSING_MARK", fieldType: "B", fieldCache: &ENCLOSING_MARK_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.COMBINING_SPACING_MARK

    private static var COMBINING_SPACING_MARK_FieldID: jfieldID?

    open static var COMBINING_SPACING_MARK: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "COMBINING_SPACING_MARK", fieldType: "B", fieldCache: &COMBINING_SPACING_MARK_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.DECIMAL_DIGIT_NUMBER

    private static var DECIMAL_DIGIT_NUMBER_FieldID: jfieldID?

    open static var DECIMAL_DIGIT_NUMBER: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "DECIMAL_DIGIT_NUMBER", fieldType: "B", fieldCache: &DECIMAL_DIGIT_NUMBER_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.LETTER_NUMBER

    private static var LETTER_NUMBER_FieldID: jfieldID?

    open static var LETTER_NUMBER: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "LETTER_NUMBER", fieldType: "B", fieldCache: &LETTER_NUMBER_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.OTHER_NUMBER

    private static var OTHER_NUMBER_FieldID: jfieldID?

    open static var OTHER_NUMBER: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "OTHER_NUMBER", fieldType: "B", fieldCache: &OTHER_NUMBER_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.SPACE_SEPARATOR

    private static var SPACE_SEPARATOR_FieldID: jfieldID?

    open static var SPACE_SEPARATOR: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "SPACE_SEPARATOR", fieldType: "B", fieldCache: &SPACE_SEPARATOR_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.LINE_SEPARATOR

    private static var LINE_SEPARATOR_FieldID: jfieldID?

    open static var LINE_SEPARATOR: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "LINE_SEPARATOR", fieldType: "B", fieldCache: &LINE_SEPARATOR_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.PARAGRAPH_SEPARATOR

    private static var PARAGRAPH_SEPARATOR_FieldID: jfieldID?

    open static var PARAGRAPH_SEPARATOR: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "PARAGRAPH_SEPARATOR", fieldType: "B", fieldCache: &PARAGRAPH_SEPARATOR_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.CONTROL

    private static var CONTROL_FieldID: jfieldID?

    open static var CONTROL: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "CONTROL", fieldType: "B", fieldCache: &CONTROL_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.FORMAT

    private static var FORMAT_FieldID: jfieldID?

    open static var FORMAT: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "FORMAT", fieldType: "B", fieldCache: &FORMAT_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.PRIVATE_USE

    private static var PRIVATE_USE_FieldID: jfieldID?

    open static var PRIVATE_USE: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "PRIVATE_USE", fieldType: "B", fieldCache: &PRIVATE_USE_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.SURROGATE

    private static var SURROGATE_FieldID: jfieldID?

    open static var SURROGATE: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "SURROGATE", fieldType: "B", fieldCache: &SURROGATE_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.DASH_PUNCTUATION

    private static var DASH_PUNCTUATION_FieldID: jfieldID?

    open static var DASH_PUNCTUATION: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "DASH_PUNCTUATION", fieldType: "B", fieldCache: &DASH_PUNCTUATION_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.START_PUNCTUATION

    private static var START_PUNCTUATION_FieldID: jfieldID?

    open static var START_PUNCTUATION: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "START_PUNCTUATION", fieldType: "B", fieldCache: &START_PUNCTUATION_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.END_PUNCTUATION

    private static var END_PUNCTUATION_FieldID: jfieldID?

    open static var END_PUNCTUATION: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "END_PUNCTUATION", fieldType: "B", fieldCache: &END_PUNCTUATION_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.CONNECTOR_PUNCTUATION

    private static var CONNECTOR_PUNCTUATION_FieldID: jfieldID?

    open static var CONNECTOR_PUNCTUATION: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "CONNECTOR_PUNCTUATION", fieldType: "B", fieldCache: &CONNECTOR_PUNCTUATION_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.OTHER_PUNCTUATION

    private static var OTHER_PUNCTUATION_FieldID: jfieldID?

    open static var OTHER_PUNCTUATION: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "OTHER_PUNCTUATION", fieldType: "B", fieldCache: &OTHER_PUNCTUATION_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.MATH_SYMBOL

    private static var MATH_SYMBOL_FieldID: jfieldID?

    open static var MATH_SYMBOL: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "MATH_SYMBOL", fieldType: "B", fieldCache: &MATH_SYMBOL_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.CURRENCY_SYMBOL

    private static var CURRENCY_SYMBOL_FieldID: jfieldID?

    open static var CURRENCY_SYMBOL: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "CURRENCY_SYMBOL", fieldType: "B", fieldCache: &CURRENCY_SYMBOL_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.MODIFIER_SYMBOL

    private static var MODIFIER_SYMBOL_FieldID: jfieldID?

    open static var MODIFIER_SYMBOL: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "MODIFIER_SYMBOL", fieldType: "B", fieldCache: &MODIFIER_SYMBOL_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.OTHER_SYMBOL

    private static var OTHER_SYMBOL_FieldID: jfieldID?

    open static var OTHER_SYMBOL: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "OTHER_SYMBOL", fieldType: "B", fieldCache: &OTHER_SYMBOL_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.INITIAL_QUOTE_PUNCTUATION

    private static var INITIAL_QUOTE_PUNCTUATION_FieldID: jfieldID?

    open static var INITIAL_QUOTE_PUNCTUATION: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "INITIAL_QUOTE_PUNCTUATION", fieldType: "B", fieldCache: &INITIAL_QUOTE_PUNCTUATION_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.FINAL_QUOTE_PUNCTUATION

    private static var FINAL_QUOTE_PUNCTUATION_FieldID: jfieldID?

    open static var FINAL_QUOTE_PUNCTUATION: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "FINAL_QUOTE_PUNCTUATION", fieldType: "B", fieldCache: &FINAL_QUOTE_PUNCTUATION_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// static final int java.lang.Character.ERROR

    /// public static final byte java.lang.Character.DIRECTIONALITY_UNDEFINED

    private static var DIRECTIONALITY_UNDEFINED_FieldID: jfieldID?

    open static var DIRECTIONALITY_UNDEFINED: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "DIRECTIONALITY_UNDEFINED", fieldType: "B", fieldCache: &DIRECTIONALITY_UNDEFINED_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.DIRECTIONALITY_LEFT_TO_RIGHT

    private static var DIRECTIONALITY_LEFT_TO_RIGHT_FieldID: jfieldID?

    open static var DIRECTIONALITY_LEFT_TO_RIGHT: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "DIRECTIONALITY_LEFT_TO_RIGHT", fieldType: "B", fieldCache: &DIRECTIONALITY_LEFT_TO_RIGHT_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT

    private static var DIRECTIONALITY_RIGHT_TO_LEFT_FieldID: jfieldID?

    open static var DIRECTIONALITY_RIGHT_TO_LEFT: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "DIRECTIONALITY_RIGHT_TO_LEFT", fieldType: "B", fieldCache: &DIRECTIONALITY_RIGHT_TO_LEFT_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC

    private static var DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC_FieldID: jfieldID?

    open static var DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC", fieldType: "B", fieldCache: &DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.DIRECTIONALITY_EUROPEAN_NUMBER

    private static var DIRECTIONALITY_EUROPEAN_NUMBER_FieldID: jfieldID?

    open static var DIRECTIONALITY_EUROPEAN_NUMBER: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "DIRECTIONALITY_EUROPEAN_NUMBER", fieldType: "B", fieldCache: &DIRECTIONALITY_EUROPEAN_NUMBER_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR

    private static var DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR_FieldID: jfieldID?

    open static var DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR", fieldType: "B", fieldCache: &DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR

    private static var DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR_FieldID: jfieldID?

    open static var DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR", fieldType: "B", fieldCache: &DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.DIRECTIONALITY_ARABIC_NUMBER

    private static var DIRECTIONALITY_ARABIC_NUMBER_FieldID: jfieldID?

    open static var DIRECTIONALITY_ARABIC_NUMBER: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "DIRECTIONALITY_ARABIC_NUMBER", fieldType: "B", fieldCache: &DIRECTIONALITY_ARABIC_NUMBER_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.DIRECTIONALITY_COMMON_NUMBER_SEPARATOR

    private static var DIRECTIONALITY_COMMON_NUMBER_SEPARATOR_FieldID: jfieldID?

    open static var DIRECTIONALITY_COMMON_NUMBER_SEPARATOR: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "DIRECTIONALITY_COMMON_NUMBER_SEPARATOR", fieldType: "B", fieldCache: &DIRECTIONALITY_COMMON_NUMBER_SEPARATOR_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.DIRECTIONALITY_NONSPACING_MARK

    private static var DIRECTIONALITY_NONSPACING_MARK_FieldID: jfieldID?

    open static var DIRECTIONALITY_NONSPACING_MARK: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "DIRECTIONALITY_NONSPACING_MARK", fieldType: "B", fieldCache: &DIRECTIONALITY_NONSPACING_MARK_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.DIRECTIONALITY_BOUNDARY_NEUTRAL

    private static var DIRECTIONALITY_BOUNDARY_NEUTRAL_FieldID: jfieldID?

    open static var DIRECTIONALITY_BOUNDARY_NEUTRAL: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "DIRECTIONALITY_BOUNDARY_NEUTRAL", fieldType: "B", fieldCache: &DIRECTIONALITY_BOUNDARY_NEUTRAL_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.DIRECTIONALITY_PARAGRAPH_SEPARATOR

    private static var DIRECTIONALITY_PARAGRAPH_SEPARATOR_FieldID: jfieldID?

    open static var DIRECTIONALITY_PARAGRAPH_SEPARATOR: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "DIRECTIONALITY_PARAGRAPH_SEPARATOR", fieldType: "B", fieldCache: &DIRECTIONALITY_PARAGRAPH_SEPARATOR_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.DIRECTIONALITY_SEGMENT_SEPARATOR

    private static var DIRECTIONALITY_SEGMENT_SEPARATOR_FieldID: jfieldID?

    open static var DIRECTIONALITY_SEGMENT_SEPARATOR: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "DIRECTIONALITY_SEGMENT_SEPARATOR", fieldType: "B", fieldCache: &DIRECTIONALITY_SEGMENT_SEPARATOR_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.DIRECTIONALITY_WHITESPACE

    private static var DIRECTIONALITY_WHITESPACE_FieldID: jfieldID?

    open static var DIRECTIONALITY_WHITESPACE: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "DIRECTIONALITY_WHITESPACE", fieldType: "B", fieldCache: &DIRECTIONALITY_WHITESPACE_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.DIRECTIONALITY_OTHER_NEUTRALS

    private static var DIRECTIONALITY_OTHER_NEUTRALS_FieldID: jfieldID?

    open static var DIRECTIONALITY_OTHER_NEUTRALS: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "DIRECTIONALITY_OTHER_NEUTRALS", fieldType: "B", fieldCache: &DIRECTIONALITY_OTHER_NEUTRALS_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING

    private static var DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING_FieldID: jfieldID?

    open static var DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING", fieldType: "B", fieldCache: &DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE

    private static var DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE_FieldID: jfieldID?

    open static var DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE", fieldType: "B", fieldCache: &DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING

    private static var DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING_FieldID: jfieldID?

    open static var DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING", fieldType: "B", fieldCache: &DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE

    private static var DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE_FieldID: jfieldID?

    open static var DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE", fieldType: "B", fieldCache: &DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final byte java.lang.Character.DIRECTIONALITY_POP_DIRECTIONAL_FORMAT

    private static var DIRECTIONALITY_POP_DIRECTIONAL_FORMAT_FieldID: jfieldID?

    open static var DIRECTIONALITY_POP_DIRECTIONAL_FORMAT: Int8 {
        get {
            let __value = JNIField.GetStaticByteField( fieldName: "DIRECTIONALITY_POP_DIRECTIONAL_FORMAT", fieldType: "B", fieldCache: &DIRECTIONALITY_POP_DIRECTIONAL_FORMAT_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int8(), from: __value )
        }
    }

    /// public static final char java.lang.Character.MIN_HIGH_SURROGATE

    private static var MIN_HIGH_SURROGATE_FieldID: jfieldID?

    open static var MIN_HIGH_SURROGATE: UInt16 {
        get {
            let __value = JNIField.GetStaticCharField( fieldName: "MIN_HIGH_SURROGATE", fieldType: "C", fieldCache: &MIN_HIGH_SURROGATE_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: UInt16(), from: __value )
        }
    }

    /// public static final char java.lang.Character.MAX_HIGH_SURROGATE

    private static var MAX_HIGH_SURROGATE_FieldID: jfieldID?

    open static var MAX_HIGH_SURROGATE: UInt16 {
        get {
            let __value = JNIField.GetStaticCharField( fieldName: "MAX_HIGH_SURROGATE", fieldType: "C", fieldCache: &MAX_HIGH_SURROGATE_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: UInt16(), from: __value )
        }
    }

    /// public static final char java.lang.Character.MIN_LOW_SURROGATE

    private static var MIN_LOW_SURROGATE_FieldID: jfieldID?

    open static var MIN_LOW_SURROGATE: UInt16 {
        get {
            let __value = JNIField.GetStaticCharField( fieldName: "MIN_LOW_SURROGATE", fieldType: "C", fieldCache: &MIN_LOW_SURROGATE_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: UInt16(), from: __value )
        }
    }

    /// public static final char java.lang.Character.MAX_LOW_SURROGATE

    private static var MAX_LOW_SURROGATE_FieldID: jfieldID?

    open static var MAX_LOW_SURROGATE: UInt16 {
        get {
            let __value = JNIField.GetStaticCharField( fieldName: "MAX_LOW_SURROGATE", fieldType: "C", fieldCache: &MAX_LOW_SURROGATE_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: UInt16(), from: __value )
        }
    }

    /// public static final char java.lang.Character.MIN_SURROGATE

    private static var MIN_SURROGATE_FieldID: jfieldID?

    open static var MIN_SURROGATE: UInt16 {
        get {
            let __value = JNIField.GetStaticCharField( fieldName: "MIN_SURROGATE", fieldType: "C", fieldCache: &MIN_SURROGATE_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: UInt16(), from: __value )
        }
    }

    /// public static final char java.lang.Character.MAX_SURROGATE

    private static var MAX_SURROGATE_FieldID: jfieldID?

    open static var MAX_SURROGATE: UInt16 {
        get {
            let __value = JNIField.GetStaticCharField( fieldName: "MAX_SURROGATE", fieldType: "C", fieldCache: &MAX_SURROGATE_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: UInt16(), from: __value )
        }
    }

    /// public static final int java.lang.Character.MIN_SUPPLEMENTARY_CODE_POINT

    private static var MIN_SUPPLEMENTARY_CODE_POINT_FieldID: jfieldID?

    open static var MIN_SUPPLEMENTARY_CODE_POINT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "MIN_SUPPLEMENTARY_CODE_POINT", fieldType: "I", fieldCache: &MIN_SUPPLEMENTARY_CODE_POINT_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.lang.Character.MIN_CODE_POINT

    private static var MIN_CODE_POINT_FieldID: jfieldID?

    open static var MIN_CODE_POINT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "MIN_CODE_POINT", fieldType: "I", fieldCache: &MIN_CODE_POINT_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.lang.Character.MAX_CODE_POINT

    private static var MAX_CODE_POINT_FieldID: jfieldID?

    open static var MAX_CODE_POINT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "MAX_CODE_POINT", fieldType: "I", fieldCache: &MAX_CODE_POINT_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// private final char java.lang.Character.value

    /// private static final long java.lang.Character.serialVersionUID

    /// private static final int java.lang.Character.FAST_PATH_MAX

    /// public static final int java.lang.Character.SIZE

    private static var SIZE_FieldID: jfieldID?

    open static var SIZE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SIZE", fieldType: "I", fieldCache: &SIZE_FieldID, className: "java/lang/Character", classCache: &CharacterJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// static final boolean java.lang.Character.$assertionsDisabled

    /// public java.lang.Character(char)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: UInt16 ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/Character", classCache: &Character.CharacterJNIClass, methodSig: "(C)V", methodCache: &Character.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: UInt16 ) {
        self.init( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isJavaIdentifierStart(char)

    private static var isJavaIdentifierStart_MethodID_2: jmethodID?

    open class func isJavaIdentifierStart( arg0: UInt16 ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isJavaIdentifierStart", methodSig: "(C)Z", methodCache: &isJavaIdentifierStart_MethodID_2, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isJavaIdentifierStart( _ _arg0: UInt16 ) -> Bool {
        return isJavaIdentifierStart( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isJavaIdentifierStart(int)

    private static var isJavaIdentifierStart_MethodID_3: jmethodID?

    open class func isJavaIdentifierStart( arg0: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isJavaIdentifierStart", methodSig: "(I)Z", methodCache: &isJavaIdentifierStart_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isJavaIdentifierStart( _ _arg0: Int ) -> Bool {
        return isJavaIdentifierStart( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isJavaIdentifierPart(int)

    private static var isJavaIdentifierPart_MethodID_4: jmethodID?

    open class func isJavaIdentifierPart( arg0: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isJavaIdentifierPart", methodSig: "(I)Z", methodCache: &isJavaIdentifierPart_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isJavaIdentifierPart( _ _arg0: Int ) -> Bool {
        return isJavaIdentifierPart( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isJavaIdentifierPart(char)

    private static var isJavaIdentifierPart_MethodID_5: jmethodID?

    open class func isJavaIdentifierPart( arg0: UInt16 ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isJavaIdentifierPart", methodSig: "(C)Z", methodCache: &isJavaIdentifierPart_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isJavaIdentifierPart( _ _arg0: UInt16 ) -> Bool {
        return isJavaIdentifierPart( arg0: _arg0 )
    }

    /// public boolean java.lang.Character.equals(java.lang.Object)

    /// public java.lang.String java.lang.Character.toString()

    /// public static java.lang.String java.lang.Character.toString(char)

    private static var toString_MethodID_6: jmethodID?

    open class func toString( arg0: UInt16 ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "toString", methodSig: "(C)Ljava/lang/String;", methodCache: &toString_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }

    open class func toString( _ _arg0: UInt16 ) -> String! {
        return toString( arg0: _arg0 )
    }

    /// public int java.lang.Character.hashCode()

    /// public static char java.lang.Character.reverseBytes(char)

    private static var reverseBytes_MethodID_7: jmethodID?

    open class func reverseBytes( arg0: UInt16 ) -> UInt16 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticCharMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "reverseBytes", methodSig: "(C)C", methodCache: &reverseBytes_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: UInt16(), from: __return )
    }

    open class func reverseBytes( _ _arg0: UInt16 ) -> UInt16 {
        return reverseBytes( arg0: _arg0 )
    }

    /// public int java.lang.Character.compareTo(java.lang.Character)

    private static var compareTo_MethodID_8: jmethodID?

    open func compareTo( arg0: Character? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "compareTo", methodSig: "(Ljava/lang/Character;)I", methodCache: &Character.compareTo_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func compareTo( _ _arg0: Character? ) -> Int {
        return compareTo( arg0: _arg0 )
    }

    /// public int java.lang.Character.compareTo(java.lang.Object)

    private static var compareTo_MethodID_9: jmethodID?

    open func compareTo( arg0: JavaObject? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "compareTo", methodSig: "(Ljava/lang/Object;)I", methodCache: &Character.compareTo_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func compareTo( _ _arg0: JavaObject? ) -> Int {
        return compareTo( arg0: _arg0 )
    }

    /// public char java.lang.Character.charValue()

    private static var charValue_MethodID_10: jmethodID?

    open func charValue() -> UInt16 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallCharMethod( object: javaObject, methodName: "charValue", methodSig: "()C", methodCache: &Character.charValue_MethodID_10, args: &__args, locals: &__locals )
        return JNIType.decode( type: UInt16(), from: __return )
    }


    /// public static java.lang.Character java.lang.Character.valueOf(char)

    private static var valueOf_MethodID_11: jmethodID?

    open class func valueOf( arg0: UInt16 ) -> Character! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "valueOf", methodSig: "(C)Ljava/lang/Character;", methodCache: &valueOf_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Character( javaObject: __return ) : nil
    }

    open class func valueOf( _ _arg0: UInt16 ) -> Character! {
        return valueOf( arg0: _arg0 )
    }

    /// public static int java.lang.Character.codePointAt(java.lang.CharSequence,int)

    private static var codePointAt_MethodID_12: jmethodID?

    open class func codePointAt( arg0: CharSequence?, arg1: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "codePointAt", methodSig: "(Ljava/lang/CharSequence;I)I", methodCache: &codePointAt_MethodID_12, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func codePointAt( _ _arg0: CharSequence?, _ _arg1: Int ) -> Int {
        return codePointAt( arg0: _arg0, arg1: _arg1 )
    }

    /// public static int java.lang.Character.codePointAt(char[],int)

    private static var codePointAt_MethodID_13: jmethodID?

    open class func codePointAt( arg0: [UInt16]?, arg1: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "codePointAt", methodSig: "([CI)I", methodCache: &codePointAt_MethodID_13, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func codePointAt( _ _arg0: [UInt16]?, _ _arg1: Int ) -> Int {
        return codePointAt( arg0: _arg0, arg1: _arg1 )
    }

    /// public static int java.lang.Character.codePointAt(char[],int,int)

    private static var codePointAt_MethodID_14: jmethodID?

    open class func codePointAt( arg0: [UInt16]?, arg1: Int, arg2: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "codePointAt", methodSig: "([CII)I", methodCache: &codePointAt_MethodID_14, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func codePointAt( _ _arg0: [UInt16]?, _ _arg1: Int, _ _arg2: Int ) -> Int {
        return codePointAt( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public static int java.lang.Character.codePointBefore(char[],int)

    private static var codePointBefore_MethodID_15: jmethodID?

    open class func codePointBefore( arg0: [UInt16]?, arg1: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "codePointBefore", methodSig: "([CI)I", methodCache: &codePointBefore_MethodID_15, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func codePointBefore( _ _arg0: [UInt16]?, _ _arg1: Int ) -> Int {
        return codePointBefore( arg0: _arg0, arg1: _arg1 )
    }

    /// public static int java.lang.Character.codePointBefore(java.lang.CharSequence,int)

    private static var codePointBefore_MethodID_16: jmethodID?

    open class func codePointBefore( arg0: CharSequence?, arg1: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "codePointBefore", methodSig: "(Ljava/lang/CharSequence;I)I", methodCache: &codePointBefore_MethodID_16, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func codePointBefore( _ _arg0: CharSequence?, _ _arg1: Int ) -> Int {
        return codePointBefore( arg0: _arg0, arg1: _arg1 )
    }

    /// public static int java.lang.Character.codePointBefore(char[],int,int)

    private static var codePointBefore_MethodID_17: jmethodID?

    open class func codePointBefore( arg0: [UInt16]?, arg1: Int, arg2: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "codePointBefore", methodSig: "([CII)I", methodCache: &codePointBefore_MethodID_17, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func codePointBefore( _ _arg0: [UInt16]?, _ _arg1: Int, _ _arg2: Int ) -> Int {
        return codePointBefore( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public static int java.lang.Character.codePointCount(char[],int,int)

    private static var codePointCount_MethodID_18: jmethodID?

    open class func codePointCount( arg0: [UInt16]?, arg1: Int, arg2: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "codePointCount", methodSig: "([CII)I", methodCache: &codePointCount_MethodID_18, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func codePointCount( _ _arg0: [UInt16]?, _ _arg1: Int, _ _arg2: Int ) -> Int {
        return codePointCount( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public static int java.lang.Character.codePointCount(java.lang.CharSequence,int,int)

    private static var codePointCount_MethodID_19: jmethodID?

    open class func codePointCount( arg0: CharSequence?, arg1: Int, arg2: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "codePointCount", methodSig: "(Ljava/lang/CharSequence;II)I", methodCache: &codePointCount_MethodID_19, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func codePointCount( _ _arg0: CharSequence?, _ _arg1: Int, _ _arg2: Int ) -> Int {
        return codePointCount( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public static int java.lang.Character.offsetByCodePoints(java.lang.CharSequence,int,int)

    private static var offsetByCodePoints_MethodID_20: jmethodID?

    open class func offsetByCodePoints( arg0: CharSequence?, arg1: Int, arg2: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "offsetByCodePoints", methodSig: "(Ljava/lang/CharSequence;II)I", methodCache: &offsetByCodePoints_MethodID_20, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func offsetByCodePoints( _ _arg0: CharSequence?, _ _arg1: Int, _ _arg2: Int ) -> Int {
        return offsetByCodePoints( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public static int java.lang.Character.offsetByCodePoints(char[],int,int,int,int)

    private static var offsetByCodePoints_MethodID_21: jmethodID?

    open class func offsetByCodePoints( arg0: [UInt16]?, arg1: Int, arg2: Int, arg3: Int, arg4: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "offsetByCodePoints", methodSig: "([CIIII)I", methodCache: &offsetByCodePoints_MethodID_21, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func offsetByCodePoints( _ _arg0: [UInt16]?, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int ) -> Int {
        return offsetByCodePoints( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public static int java.lang.Character.toLowerCase(int)

    private static var toLowerCase_MethodID_22: jmethodID?

    open class func toLowerCase( arg0: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "toLowerCase", methodSig: "(I)I", methodCache: &toLowerCase_MethodID_22, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func toLowerCase( _ _arg0: Int ) -> Int {
        return toLowerCase( arg0: _arg0 )
    }

    /// public static char java.lang.Character.toLowerCase(char)

    private static var toLowerCase_MethodID_23: jmethodID?

    open class func toLowerCase( arg0: UInt16 ) -> UInt16 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticCharMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "toLowerCase", methodSig: "(C)C", methodCache: &toLowerCase_MethodID_23, args: &__args, locals: &__locals )
        return JNIType.decode( type: UInt16(), from: __return )
    }

    open class func toLowerCase( _ _arg0: UInt16 ) -> UInt16 {
        return toLowerCase( arg0: _arg0 )
    }

    /// public static char java.lang.Character.toUpperCase(char)

    private static var toUpperCase_MethodID_24: jmethodID?

    open class func toUpperCase( arg0: UInt16 ) -> UInt16 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticCharMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "toUpperCase", methodSig: "(C)C", methodCache: &toUpperCase_MethodID_24, args: &__args, locals: &__locals )
        return JNIType.decode( type: UInt16(), from: __return )
    }

    open class func toUpperCase( _ _arg0: UInt16 ) -> UInt16 {
        return toUpperCase( arg0: _arg0 )
    }

    /// public static int java.lang.Character.toUpperCase(int)

    private static var toUpperCase_MethodID_25: jmethodID?

    open class func toUpperCase( arg0: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "toUpperCase", methodSig: "(I)I", methodCache: &toUpperCase_MethodID_25, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func toUpperCase( _ _arg0: Int ) -> Int {
        return toUpperCase( arg0: _arg0 )
    }

    /// static void java.lang.Character.toSurrogates(int,char[],int)

    /// static int java.lang.Character.codePointAtImpl(char[],int,int)

    /// static int java.lang.Character.codePointBeforeImpl(char[],int,int)

    /// static int java.lang.Character.codePointCountImpl(char[],int,int)

    /// static int java.lang.Character.offsetByCodePointsImpl(char[],int,int,int,int)

    /// public static char[] java.lang.Character.toChars(int)

    private static var toChars_MethodID_26: jmethodID?

    open class func toChars( arg0: Int ) -> [UInt16]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "toChars", methodSig: "(I)[C", methodCache: &toChars_MethodID_26, args: &__args, locals: &__locals )
        return JNIType.decode( type: [UInt16](), from: __return )
    }

    open class func toChars( _ _arg0: Int ) -> [UInt16]! {
        return toChars( arg0: _arg0 )
    }

    /// public static int java.lang.Character.toChars(int,char[],int)

    private static var toChars_MethodID_27: jmethodID?

    open class func toChars( arg0: Int, arg1: [UInt16]?, arg2: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "toChars", methodSig: "(I[CI)I", methodCache: &toChars_MethodID_27, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func toChars( _ _arg0: Int, _ _arg1: [UInt16]?, _ _arg2: Int ) -> Int {
        return toChars( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public static int java.lang.Character.charCount(int)

    private static var charCount_MethodID_28: jmethodID?

    open class func charCount( arg0: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "charCount", methodSig: "(I)I", methodCache: &charCount_MethodID_28, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func charCount( _ _arg0: Int ) -> Int {
        return charCount( arg0: _arg0 )
    }

    /// static int java.lang.Character.toUpperCaseEx(int)

    /// static char[] java.lang.Character.toUpperCaseCharArray(int)

    /// public static int java.lang.Character.getType(int)

    private static var getType_MethodID_29: jmethodID?

    open class func getType( arg0: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "getType", methodSig: "(I)I", methodCache: &getType_MethodID_29, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func getType( _ _arg0: Int ) -> Int {
        return getType( arg0: _arg0 )
    }

    /// public static int java.lang.Character.getType(char)

    private static var getType_MethodID_30: jmethodID?

    open class func getType( arg0: UInt16 ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "getType", methodSig: "(C)I", methodCache: &getType_MethodID_30, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func getType( _ _arg0: UInt16 ) -> Int {
        return getType( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isValidCodePoint(int)

    private static var isValidCodePoint_MethodID_31: jmethodID?

    open class func isValidCodePoint( arg0: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isValidCodePoint", methodSig: "(I)Z", methodCache: &isValidCodePoint_MethodID_31, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isValidCodePoint( _ _arg0: Int ) -> Bool {
        return isValidCodePoint( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isLowSurrogate(char)

    private static var isLowSurrogate_MethodID_32: jmethodID?

    open class func isLowSurrogate( arg0: UInt16 ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isLowSurrogate", methodSig: "(C)Z", methodCache: &isLowSurrogate_MethodID_32, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isLowSurrogate( _ _arg0: UInt16 ) -> Bool {
        return isLowSurrogate( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isHighSurrogate(char)

    private static var isHighSurrogate_MethodID_33: jmethodID?

    open class func isHighSurrogate( arg0: UInt16 ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isHighSurrogate", methodSig: "(C)Z", methodCache: &isHighSurrogate_MethodID_33, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isHighSurrogate( _ _arg0: UInt16 ) -> Bool {
        return isHighSurrogate( arg0: _arg0 )
    }

    /// private static int java.lang.Character.getPlane(int)

    /// public static boolean java.lang.Character.isSupplementaryCodePoint(int)

    private static var isSupplementaryCodePoint_MethodID_34: jmethodID?

    open class func isSupplementaryCodePoint( arg0: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isSupplementaryCodePoint", methodSig: "(I)Z", methodCache: &isSupplementaryCodePoint_MethodID_34, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isSupplementaryCodePoint( _ _arg0: Int ) -> Bool {
        return isSupplementaryCodePoint( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isSurrogatePair(char,char)

    private static var isSurrogatePair_MethodID_35: jmethodID?

    open class func isSurrogatePair( arg0: UInt16, arg1: UInt16 ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isSurrogatePair", methodSig: "(CC)Z", methodCache: &isSurrogatePair_MethodID_35, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isSurrogatePair( _ _arg0: UInt16, _ _arg1: UInt16 ) -> Bool {
        return isSurrogatePair( arg0: _arg0, arg1: _arg1 )
    }

    /// public static int java.lang.Character.toCodePoint(char,char)

    private static var toCodePoint_MethodID_36: jmethodID?

    open class func toCodePoint( arg0: UInt16, arg1: UInt16 ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "toCodePoint", methodSig: "(CC)I", methodCache: &toCodePoint_MethodID_36, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func toCodePoint( _ _arg0: UInt16, _ _arg1: UInt16 ) -> Int {
        return toCodePoint( arg0: _arg0, arg1: _arg1 )
    }

    /// public static boolean java.lang.Character.isLowerCase(int)

    private static var isLowerCase_MethodID_37: jmethodID?

    open class func isLowerCase( arg0: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isLowerCase", methodSig: "(I)Z", methodCache: &isLowerCase_MethodID_37, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isLowerCase( _ _arg0: Int ) -> Bool {
        return isLowerCase( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isLowerCase(char)

    private static var isLowerCase_MethodID_38: jmethodID?

    open class func isLowerCase( arg0: UInt16 ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isLowerCase", methodSig: "(C)Z", methodCache: &isLowerCase_MethodID_38, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isLowerCase( _ _arg0: UInt16 ) -> Bool {
        return isLowerCase( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isUpperCase(int)

    private static var isUpperCase_MethodID_39: jmethodID?

    open class func isUpperCase( arg0: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isUpperCase", methodSig: "(I)Z", methodCache: &isUpperCase_MethodID_39, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isUpperCase( _ _arg0: Int ) -> Bool {
        return isUpperCase( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isUpperCase(char)

    private static var isUpperCase_MethodID_40: jmethodID?

    open class func isUpperCase( arg0: UInt16 ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isUpperCase", methodSig: "(C)Z", methodCache: &isUpperCase_MethodID_40, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isUpperCase( _ _arg0: UInt16 ) -> Bool {
        return isUpperCase( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isTitleCase(int)

    private static var isTitleCase_MethodID_41: jmethodID?

    open class func isTitleCase( arg0: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isTitleCase", methodSig: "(I)Z", methodCache: &isTitleCase_MethodID_41, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isTitleCase( _ _arg0: Int ) -> Bool {
        return isTitleCase( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isTitleCase(char)

    private static var isTitleCase_MethodID_42: jmethodID?

    open class func isTitleCase( arg0: UInt16 ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isTitleCase", methodSig: "(C)Z", methodCache: &isTitleCase_MethodID_42, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isTitleCase( _ _arg0: UInt16 ) -> Bool {
        return isTitleCase( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isDigit(char)

    private static var isDigit_MethodID_43: jmethodID?

    open class func isDigit( arg0: UInt16 ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isDigit", methodSig: "(C)Z", methodCache: &isDigit_MethodID_43, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isDigit( _ _arg0: UInt16 ) -> Bool {
        return isDigit( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isDigit(int)

    private static var isDigit_MethodID_44: jmethodID?

    open class func isDigit( arg0: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isDigit", methodSig: "(I)Z", methodCache: &isDigit_MethodID_44, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isDigit( _ _arg0: Int ) -> Bool {
        return isDigit( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isDefined(int)

    private static var isDefined_MethodID_45: jmethodID?

    open class func isDefined( arg0: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isDefined", methodSig: "(I)Z", methodCache: &isDefined_MethodID_45, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isDefined( _ _arg0: Int ) -> Bool {
        return isDefined( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isDefined(char)

    private static var isDefined_MethodID_46: jmethodID?

    open class func isDefined( arg0: UInt16 ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isDefined", methodSig: "(C)Z", methodCache: &isDefined_MethodID_46, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isDefined( _ _arg0: UInt16 ) -> Bool {
        return isDefined( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isLetter(int)

    private static var isLetter_MethodID_47: jmethodID?

    open class func isLetter( arg0: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isLetter", methodSig: "(I)Z", methodCache: &isLetter_MethodID_47, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isLetter( _ _arg0: Int ) -> Bool {
        return isLetter( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isLetter(char)

    private static var isLetter_MethodID_48: jmethodID?

    open class func isLetter( arg0: UInt16 ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isLetter", methodSig: "(C)Z", methodCache: &isLetter_MethodID_48, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isLetter( _ _arg0: UInt16 ) -> Bool {
        return isLetter( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isLetterOrDigit(int)

    private static var isLetterOrDigit_MethodID_49: jmethodID?

    open class func isLetterOrDigit( arg0: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isLetterOrDigit", methodSig: "(I)Z", methodCache: &isLetterOrDigit_MethodID_49, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isLetterOrDigit( _ _arg0: Int ) -> Bool {
        return isLetterOrDigit( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isLetterOrDigit(char)

    private static var isLetterOrDigit_MethodID_50: jmethodID?

    open class func isLetterOrDigit( arg0: UInt16 ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isLetterOrDigit", methodSig: "(C)Z", methodCache: &isLetterOrDigit_MethodID_50, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isLetterOrDigit( _ _arg0: UInt16 ) -> Bool {
        return isLetterOrDigit( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isJavaLetter(char)

    private static var isJavaLetter_MethodID_51: jmethodID?

    open class func isJavaLetter( arg0: UInt16 ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isJavaLetter", methodSig: "(C)Z", methodCache: &isJavaLetter_MethodID_51, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isJavaLetter( _ _arg0: UInt16 ) -> Bool {
        return isJavaLetter( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isJavaLetterOrDigit(char)

    private static var isJavaLetterOrDigit_MethodID_52: jmethodID?

    open class func isJavaLetterOrDigit( arg0: UInt16 ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isJavaLetterOrDigit", methodSig: "(C)Z", methodCache: &isJavaLetterOrDigit_MethodID_52, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isJavaLetterOrDigit( _ _arg0: UInt16 ) -> Bool {
        return isJavaLetterOrDigit( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isUnicodeIdentifierStart(int)

    private static var isUnicodeIdentifierStart_MethodID_53: jmethodID?

    open class func isUnicodeIdentifierStart( arg0: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isUnicodeIdentifierStart", methodSig: "(I)Z", methodCache: &isUnicodeIdentifierStart_MethodID_53, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isUnicodeIdentifierStart( _ _arg0: Int ) -> Bool {
        return isUnicodeIdentifierStart( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isUnicodeIdentifierStart(char)

    private static var isUnicodeIdentifierStart_MethodID_54: jmethodID?

    open class func isUnicodeIdentifierStart( arg0: UInt16 ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isUnicodeIdentifierStart", methodSig: "(C)Z", methodCache: &isUnicodeIdentifierStart_MethodID_54, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isUnicodeIdentifierStart( _ _arg0: UInt16 ) -> Bool {
        return isUnicodeIdentifierStart( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isUnicodeIdentifierPart(char)

    private static var isUnicodeIdentifierPart_MethodID_55: jmethodID?

    open class func isUnicodeIdentifierPart( arg0: UInt16 ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isUnicodeIdentifierPart", methodSig: "(C)Z", methodCache: &isUnicodeIdentifierPart_MethodID_55, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isUnicodeIdentifierPart( _ _arg0: UInt16 ) -> Bool {
        return isUnicodeIdentifierPart( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isUnicodeIdentifierPart(int)

    private static var isUnicodeIdentifierPart_MethodID_56: jmethodID?

    open class func isUnicodeIdentifierPart( arg0: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isUnicodeIdentifierPart", methodSig: "(I)Z", methodCache: &isUnicodeIdentifierPart_MethodID_56, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isUnicodeIdentifierPart( _ _arg0: Int ) -> Bool {
        return isUnicodeIdentifierPart( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isIdentifierIgnorable(char)

    private static var isIdentifierIgnorable_MethodID_57: jmethodID?

    open class func isIdentifierIgnorable( arg0: UInt16 ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isIdentifierIgnorable", methodSig: "(C)Z", methodCache: &isIdentifierIgnorable_MethodID_57, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isIdentifierIgnorable( _ _arg0: UInt16 ) -> Bool {
        return isIdentifierIgnorable( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isIdentifierIgnorable(int)

    private static var isIdentifierIgnorable_MethodID_58: jmethodID?

    open class func isIdentifierIgnorable( arg0: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isIdentifierIgnorable", methodSig: "(I)Z", methodCache: &isIdentifierIgnorable_MethodID_58, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isIdentifierIgnorable( _ _arg0: Int ) -> Bool {
        return isIdentifierIgnorable( arg0: _arg0 )
    }

    /// public static int java.lang.Character.toTitleCase(int)

    private static var toTitleCase_MethodID_59: jmethodID?

    open class func toTitleCase( arg0: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "toTitleCase", methodSig: "(I)I", methodCache: &toTitleCase_MethodID_59, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func toTitleCase( _ _arg0: Int ) -> Int {
        return toTitleCase( arg0: _arg0 )
    }

    /// public static char java.lang.Character.toTitleCase(char)

    private static var toTitleCase_MethodID_60: jmethodID?

    open class func toTitleCase( arg0: UInt16 ) -> UInt16 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticCharMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "toTitleCase", methodSig: "(C)C", methodCache: &toTitleCase_MethodID_60, args: &__args, locals: &__locals )
        return JNIType.decode( type: UInt16(), from: __return )
    }

    open class func toTitleCase( _ _arg0: UInt16 ) -> UInt16 {
        return toTitleCase( arg0: _arg0 )
    }

    /// public static int java.lang.Character.digit(char,int)

    private static var digit_MethodID_61: jmethodID?

    open class func digit( arg0: UInt16, arg1: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "digit", methodSig: "(CI)I", methodCache: &digit_MethodID_61, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func digit( _ _arg0: UInt16, _ _arg1: Int ) -> Int {
        return digit( arg0: _arg0, arg1: _arg1 )
    }

    /// public static int java.lang.Character.digit(int,int)

    private static var digit_MethodID_62: jmethodID?

    open class func digit( arg0: Int, arg1: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "digit", methodSig: "(II)I", methodCache: &digit_MethodID_62, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func digit( _ _arg0: Int, _ _arg1: Int ) -> Int {
        return digit( arg0: _arg0, arg1: _arg1 )
    }

    /// public static int java.lang.Character.getNumericValue(int)

    private static var getNumericValue_MethodID_63: jmethodID?

    open class func getNumericValue( arg0: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "getNumericValue", methodSig: "(I)I", methodCache: &getNumericValue_MethodID_63, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func getNumericValue( _ _arg0: Int ) -> Int {
        return getNumericValue( arg0: _arg0 )
    }

    /// public static int java.lang.Character.getNumericValue(char)

    private static var getNumericValue_MethodID_64: jmethodID?

    open class func getNumericValue( arg0: UInt16 ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "getNumericValue", methodSig: "(C)I", methodCache: &getNumericValue_MethodID_64, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func getNumericValue( _ _arg0: UInt16 ) -> Int {
        return getNumericValue( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isSpace(char)

    private static var isSpace_MethodID_65: jmethodID?

    open class func isSpace( arg0: UInt16 ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isSpace", methodSig: "(C)Z", methodCache: &isSpace_MethodID_65, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isSpace( _ _arg0: UInt16 ) -> Bool {
        return isSpace( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isSpaceChar(int)

    private static var isSpaceChar_MethodID_66: jmethodID?

    open class func isSpaceChar( arg0: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isSpaceChar", methodSig: "(I)Z", methodCache: &isSpaceChar_MethodID_66, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isSpaceChar( _ _arg0: Int ) -> Bool {
        return isSpaceChar( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isSpaceChar(char)

    private static var isSpaceChar_MethodID_67: jmethodID?

    open class func isSpaceChar( arg0: UInt16 ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isSpaceChar", methodSig: "(C)Z", methodCache: &isSpaceChar_MethodID_67, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isSpaceChar( _ _arg0: UInt16 ) -> Bool {
        return isSpaceChar( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isWhitespace(char)

    private static var isWhitespace_MethodID_68: jmethodID?

    open class func isWhitespace( arg0: UInt16 ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isWhitespace", methodSig: "(C)Z", methodCache: &isWhitespace_MethodID_68, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isWhitespace( _ _arg0: UInt16 ) -> Bool {
        return isWhitespace( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isWhitespace(int)

    private static var isWhitespace_MethodID_69: jmethodID?

    open class func isWhitespace( arg0: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isWhitespace", methodSig: "(I)Z", methodCache: &isWhitespace_MethodID_69, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isWhitespace( _ _arg0: Int ) -> Bool {
        return isWhitespace( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isISOControl(char)

    private static var isISOControl_MethodID_70: jmethodID?

    open class func isISOControl( arg0: UInt16 ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isISOControl", methodSig: "(C)Z", methodCache: &isISOControl_MethodID_70, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isISOControl( _ _arg0: UInt16 ) -> Bool {
        return isISOControl( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isISOControl(int)

    private static var isISOControl_MethodID_71: jmethodID?

    open class func isISOControl( arg0: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isISOControl", methodSig: "(I)Z", methodCache: &isISOControl_MethodID_71, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isISOControl( _ _arg0: Int ) -> Bool {
        return isISOControl( arg0: _arg0 )
    }

    /// public static char java.lang.Character.forDigit(int,int)

    private static var forDigit_MethodID_72: jmethodID?

    open class func forDigit( arg0: Int, arg1: Int ) -> UInt16 {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticCharMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "forDigit", methodSig: "(II)C", methodCache: &forDigit_MethodID_72, args: &__args, locals: &__locals )
        return JNIType.decode( type: UInt16(), from: __return )
    }

    open class func forDigit( _ _arg0: Int, _ _arg1: Int ) -> UInt16 {
        return forDigit( arg0: _arg0, arg1: _arg1 )
    }

    /// public static byte java.lang.Character.getDirectionality(char)

    private static var getDirectionality_MethodID_73: jmethodID?

    open class func getDirectionality( arg0: UInt16 ) -> Int8 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticByteMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "getDirectionality", methodSig: "(C)B", methodCache: &getDirectionality_MethodID_73, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int8(), from: __return )
    }

    open class func getDirectionality( _ _arg0: UInt16 ) -> Int8 {
        return getDirectionality( arg0: _arg0 )
    }

    /// public static byte java.lang.Character.getDirectionality(int)

    private static var getDirectionality_MethodID_74: jmethodID?

    open class func getDirectionality( arg0: Int ) -> Int8 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticByteMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "getDirectionality", methodSig: "(I)B", methodCache: &getDirectionality_MethodID_74, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int8(), from: __return )
    }

    open class func getDirectionality( _ _arg0: Int ) -> Int8 {
        return getDirectionality( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isMirrored(char)

    private static var isMirrored_MethodID_75: jmethodID?

    open class func isMirrored( arg0: UInt16 ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isMirrored", methodSig: "(C)Z", methodCache: &isMirrored_MethodID_75, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isMirrored( _ _arg0: UInt16 ) -> Bool {
        return isMirrored( arg0: _arg0 )
    }

    /// public static boolean java.lang.Character.isMirrored(int)

    private static var isMirrored_MethodID_76: jmethodID?

    open class func isMirrored( arg0: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Character", classCache: &CharacterJNIClass, methodName: "isMirrored", methodSig: "(I)Z", methodCache: &isMirrored_MethodID_76, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isMirrored( _ _arg0: Int ) -> Bool {
        return isMirrored( arg0: _arg0 )
    }

}
