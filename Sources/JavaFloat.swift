
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:13 GMT 2016 ///

/// class java.lang.Float ///

open class JavaFloat: Number, JavaComparable {

    public convenience init?( casting object: JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.lang.Float", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var JavaFloatJNIClass: jclass?

    /// public static final float java.lang.Float.POSITIVE_INFINITY

    private static var POSITIVE_INFINITY_FieldID: jfieldID?

    open static var POSITIVE_INFINITY: Float {
        get {
            let __value = JNIField.GetStaticFloatField( fieldName: "POSITIVE_INFINITY", fieldType: "F", fieldCache: &POSITIVE_INFINITY_FieldID, className: "java/lang/Float", classCache: &JavaFloatJNIClass )
            return JNIType.decode( type: Float(), from: __value )
        }
    }

    /// public static final float java.lang.Float.NEGATIVE_INFINITY

    private static var NEGATIVE_INFINITY_FieldID: jfieldID?

    open static var NEGATIVE_INFINITY: Float {
        get {
            let __value = JNIField.GetStaticFloatField( fieldName: "NEGATIVE_INFINITY", fieldType: "F", fieldCache: &NEGATIVE_INFINITY_FieldID, className: "java/lang/Float", classCache: &JavaFloatJNIClass )
            return JNIType.decode( type: Float(), from: __value )
        }
    }

    /// public static final float java.lang.Float.NaN

    private static var NaN_FieldID: jfieldID?

    open static var NaN: Float {
        get {
            let __value = JNIField.GetStaticFloatField( fieldName: "NaN", fieldType: "F", fieldCache: &NaN_FieldID, className: "java/lang/Float", classCache: &JavaFloatJNIClass )
            return JNIType.decode( type: Float(), from: __value )
        }
    }

    /// public static final float java.lang.Float.MAX_VALUE

    private static var MAX_VALUE_FieldID: jfieldID?

    open static var MAX_VALUE: Float {
        get {
            let __value = JNIField.GetStaticFloatField( fieldName: "MAX_VALUE", fieldType: "F", fieldCache: &MAX_VALUE_FieldID, className: "java/lang/Float", classCache: &JavaFloatJNIClass )
            return JNIType.decode( type: Float(), from: __value )
        }
    }

    /// public static final float java.lang.Float.MIN_NORMAL

    private static var MIN_NORMAL_FieldID: jfieldID?

    open static var MIN_NORMAL: Float {
        get {
            let __value = JNIField.GetStaticFloatField( fieldName: "MIN_NORMAL", fieldType: "F", fieldCache: &MIN_NORMAL_FieldID, className: "java/lang/Float", classCache: &JavaFloatJNIClass )
            return JNIType.decode( type: Float(), from: __value )
        }
    }

    /// public static final float java.lang.Float.MIN_VALUE

    private static var MIN_VALUE_FieldID: jfieldID?

    open static var MIN_VALUE: Float {
        get {
            let __value = JNIField.GetStaticFloatField( fieldName: "MIN_VALUE", fieldType: "F", fieldCache: &MIN_VALUE_FieldID, className: "java/lang/Float", classCache: &JavaFloatJNIClass )
            return JNIType.decode( type: Float(), from: __value )
        }
    }

    /// public static final int java.lang.Float.MAX_EXPONENT

    private static var MAX_EXPONENT_FieldID: jfieldID?

    open static var MAX_EXPONENT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "MAX_EXPONENT", fieldType: "I", fieldCache: &MAX_EXPONENT_FieldID, className: "java/lang/Float", classCache: &JavaFloatJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.lang.Float.MIN_EXPONENT

    private static var MIN_EXPONENT_FieldID: jfieldID?

    open static var MIN_EXPONENT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "MIN_EXPONENT", fieldType: "I", fieldCache: &MIN_EXPONENT_FieldID, className: "java/lang/Float", classCache: &JavaFloatJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.lang.Float.SIZE

    private static var SIZE_FieldID: jfieldID?

    open static var SIZE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SIZE", fieldType: "I", fieldCache: &SIZE_FieldID, className: "java/lang/Float", classCache: &JavaFloatJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final java.lang.Class java.lang.Float.TYPE

    private static var TYPE_FieldID: jfieldID?

    open static var TYPE: Class! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "TYPE", fieldType: "Ljava/lang/Class;", fieldCache: &TYPE_FieldID, className: "java/lang/Float", classCache: &JavaFloatJNIClass )
            return __value != nil ? Class( javaObject: __value ) : nil
        }
    }

    /// private final float java.lang.Float.value

    /// private static final long java.lang.Float.serialVersionUID

    /// private static final long java.lang.Number.serialVersionUID

    /// public java.lang.Float(float)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Float ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/Float", classCache: &JavaFloat.JavaFloatJNIClass, methodSig: "(F)V", methodCache: &JavaFloat.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Float ) {
        self.init( arg0: _arg0 )
    }

    /// public java.lang.Float(java.lang.String) throws java.lang.NumberFormatException

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: String? ) throws {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/Float", classCache: &JavaFloat.JavaFloatJNIClass, methodSig: "(Ljava/lang/String;)V", methodCache: &JavaFloat.new_MethodID_2, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw NumberFormatException( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String? ) throws {
        try self.init( arg0: _arg0 )
    }

    /// public java.lang.Float(double)

    private static var new_MethodID_3: jmethodID?

    public convenience init( arg0: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/Float", classCache: &JavaFloat.JavaFloatJNIClass, methodSig: "(D)V", methodCache: &JavaFloat.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Double ) {
        self.init( arg0: _arg0 )
    }

    /// public boolean java.lang.Float.equals(java.lang.Object)

    /// public static java.lang.String java.lang.Float.toString(float)

    private static var toString_MethodID_4: jmethodID?

    open class func toString( arg0: Float ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Float", classCache: &JavaFloatJNIClass, methodName: "toString", methodSig: "(F)Ljava/lang/String;", methodCache: &toString_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }

    open class func toString( _ _arg0: Float ) -> String! {
        return toString( arg0: _arg0 )
    }

    /// public java.lang.String java.lang.Float.toString()

    /// public int java.lang.Float.hashCode()

    /// public static native int java.lang.Float.floatToRawIntBits(float)

    private static var floatToRawIntBits_MethodID_5: jmethodID?

    open class func floatToRawIntBits( arg0: Float ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Float", classCache: &JavaFloatJNIClass, methodName: "floatToRawIntBits", methodSig: "(F)I", methodCache: &floatToRawIntBits_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func floatToRawIntBits( _ _arg0: Float ) -> Int {
        return floatToRawIntBits( arg0: _arg0 )
    }

    /// public static int java.lang.Float.floatToIntBits(float)

    private static var floatToIntBits_MethodID_6: jmethodID?

    open class func floatToIntBits( arg0: Float ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Float", classCache: &JavaFloatJNIClass, methodName: "floatToIntBits", methodSig: "(F)I", methodCache: &floatToIntBits_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func floatToIntBits( _ _arg0: Float ) -> Int {
        return floatToIntBits( arg0: _arg0 )
    }

    /// public static native float java.lang.Float.intBitsToFloat(int)

    private static var intBitsToFloat_MethodID_7: jmethodID?

    open class func intBitsToFloat( arg0: Int ) -> Float {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticFloatMethod( className: "java/lang/Float", classCache: &JavaFloatJNIClass, methodName: "intBitsToFloat", methodSig: "(I)F", methodCache: &intBitsToFloat_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: Float(), from: __return )
    }

    open class func intBitsToFloat( _ _arg0: Int ) -> Float {
        return intBitsToFloat( arg0: _arg0 )
    }

    /// public int java.lang.Float.compareTo(java.lang.Object)

    private static var compareTo_MethodID_8: jmethodID?

    open func compareTo( arg0: JavaObject? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "compareTo", methodSig: "(Ljava/lang/Object;)I", methodCache: &JavaFloat.compareTo_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func compareTo( _ _arg0: JavaObject? ) -> Int {
        return compareTo( arg0: _arg0 )
    }

    /// public int java.lang.Float.compareTo(java.lang.Float)

    private static var compareTo_MethodID_9: jmethodID?

    open func compareTo( arg0: Float! ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encodeFloat( value: arg0 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "compareTo", methodSig: "(Ljava/lang/Float;)I", methodCache: &JavaFloat.compareTo_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func compareTo( _ _arg0: Float! ) -> Int {
        return compareTo( arg0: _arg0 )
    }

    /// public byte java.lang.Float.byteValue()

    /// public short java.lang.Float.shortValue()

    /// public int java.lang.Float.intValue()

    /// public long java.lang.Float.longValue()

    /// public float java.lang.Float.floatValue()

    /// public double java.lang.Float.doubleValue()

    /// public static java.lang.Float java.lang.Float.valueOf(java.lang.String) throws java.lang.NumberFormatException

    private static var valueOf_MethodID_10: jmethodID?

    open class func valueOf( arg0: String? ) throws /* java.lang.NumberFormatException */ -> Float! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Float", classCache: &JavaFloatJNIClass, methodName: "valueOf", methodSig: "(Ljava/lang/String;)Ljava/lang/Float;", methodCache: &valueOf_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw NumberFormatException( javaObject: throwable )
        }
        return JNIType.decodeFloat( from: __return )
    }

    open class func valueOf( _ _arg0: String? ) throws /* java.lang.NumberFormatException */ -> Float! {
        return try valueOf( arg0: _arg0 )
    }

    /// public static java.lang.Float java.lang.Float.valueOf(float)

    private static var valueOf_MethodID_11: jmethodID?

    open class func valueOf( arg0: Float ) -> Float! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Float", classCache: &JavaFloatJNIClass, methodName: "valueOf", methodSig: "(F)Ljava/lang/Float;", methodCache: &valueOf_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return JNIType.decodeFloat( from: __return )
    }

    open class func valueOf( _ _arg0: Float ) -> Float! {
        return valueOf( arg0: _arg0 )
    }

    /// public static java.lang.String java.lang.Float.toHexString(float)

    private static var toHexString_MethodID_12: jmethodID?

    open class func toHexString( arg0: Float ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Float", classCache: &JavaFloatJNIClass, methodName: "toHexString", methodSig: "(F)Ljava/lang/String;", methodCache: &toHexString_MethodID_12, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }

    open class func toHexString( _ _arg0: Float ) -> String! {
        return toHexString( arg0: _arg0 )
    }

    /// public static int java.lang.Float.compare(float,float)

    private static var compare_MethodID_13: jmethodID?

    open class func compare( arg0: Float, arg1: Float ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Float", classCache: &JavaFloatJNIClass, methodName: "compare", methodSig: "(FF)I", methodCache: &compare_MethodID_13, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func compare( _ _arg0: Float, _ _arg1: Float ) -> Int {
        return compare( arg0: _arg0, arg1: _arg1 )
    }

    /// public static boolean java.lang.Float.isNaN(float)

    private static var isNaN_MethodID_14: jmethodID?

    open class func isNaN( arg0: Float ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Float", classCache: &JavaFloatJNIClass, methodName: "isNaN", methodSig: "(F)Z", methodCache: &isNaN_MethodID_14, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isNaN( _ _arg0: Float ) -> Bool {
        return isNaN( arg0: _arg0 )
    }

    /// public boolean java.lang.Float.isNaN()

    private static var isNaN_MethodID_15: jmethodID?

    open func isNaN() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isNaN", methodSig: "()Z", methodCache: &JavaFloat.isNaN_MethodID_15, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public static float java.lang.Float.parseFloat(java.lang.String) throws java.lang.NumberFormatException

    private static var parseFloat_MethodID_16: jmethodID?

    open class func parseFloat( arg0: String? ) throws /* java.lang.NumberFormatException */ -> Float {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticFloatMethod( className: "java/lang/Float", classCache: &JavaFloatJNIClass, methodName: "parseFloat", methodSig: "(Ljava/lang/String;)F", methodCache: &parseFloat_MethodID_16, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw NumberFormatException( javaObject: throwable )
        }
        return JNIType.decode( type: Float(), from: __return )
    }

    open class func parseFloat( _ _arg0: String? ) throws /* java.lang.NumberFormatException */ -> Float {
        return try parseFloat( arg0: _arg0 )
    }

    /// public boolean java.lang.Float.isInfinite()

    private static var isInfinite_MethodID_17: jmethodID?

    open func isInfinite() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isInfinite", methodSig: "()Z", methodCache: &JavaFloat.isInfinite_MethodID_17, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public static boolean java.lang.Float.isInfinite(float)

    private static var isInfinite_MethodID_18: jmethodID?

    open class func isInfinite( arg0: Float ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Float", classCache: &JavaFloatJNIClass, methodName: "isInfinite", methodSig: "(F)Z", methodCache: &isInfinite_MethodID_18, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isInfinite( _ _arg0: Float ) -> Bool {
        return isInfinite( arg0: _arg0 )
    }

}
