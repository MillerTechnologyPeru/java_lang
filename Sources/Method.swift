
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.lang.reflect.Method ///

open class Method: Executable {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var MethodJNIClass: jclass?

    /// private java.lang.Class java.lang.reflect.Method.clazz

    /// private int java.lang.reflect.Method.slot

    /// private java.lang.String java.lang.reflect.Method.name

    /// private java.lang.Class java.lang.reflect.Method.returnType

    /// private java.lang.Class[] java.lang.reflect.Method.parameterTypes

    /// private java.lang.Class[] java.lang.reflect.Method.exceptionTypes

    /// private int java.lang.reflect.Method.modifiers

    /// private transient java.lang.String java.lang.reflect.Method.signature

    /// private transient sun.reflect.generics.repository.MethodRepository java.lang.reflect.Method.genericInfo

    /// private byte[] java.lang.reflect.Method.annotations

    /// private byte[] java.lang.reflect.Method.parameterAnnotations

    /// private byte[] java.lang.reflect.Method.annotationDefault

    /// private volatile sun.reflect.MethodAccessor java.lang.reflect.Method.methodAccessor

    /// private java.lang.reflect.Method java.lang.reflect.Method.root

    /// private transient volatile boolean java.lang.reflect.Executable.hasRealParameterData

    /// private transient volatile java.lang.reflect.Parameter[] java.lang.reflect.Executable.parameters

    /// private transient java.util.Map java.lang.reflect.Executable.declaredAnnotations

    /// public static final int java.lang.reflect.Member.PUBLIC

    /// public static final int java.lang.reflect.Member.DECLARED

    /// private static final java.security.Permission java.lang.reflect.AccessibleObject.ACCESS_PERMISSION

    /// boolean java.lang.reflect.AccessibleObject.override

    /// static final sun.reflect.ReflectionFactory java.lang.reflect.AccessibleObject.reflectionFactory

    /// volatile java.lang.Object java.lang.reflect.AccessibleObject.securityCheckCache

    /// java.lang.reflect.Method(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Class,java.lang.Class[],int,int,java.lang.String,byte[],byte[],byte[])

    /// public java.lang.Object java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[]) throws java.lang.IllegalAccessException,java.lang.IllegalArgumentException,java.lang.reflect.InvocationTargetException

    private static var invoke_MethodID_1: jmethodID?

    open func invoke( obj: java_swift.JavaObject?, args: [JavaObject]? ) throws /* java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException */ -> java_swift.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: obj, locals: &__locals )
        __args[1] = JNIType.toJava( value: args, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "invoke", methodSig: "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &Method.invoke_MethodID_1, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw IllegalAccessException( javaObject: throwable )
        }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    open func invoke( _ _obj: java_swift.JavaObject?, _ _args: [JavaObject]? ) throws /* java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException */ -> java_swift.JavaObject! {
        return try invoke( obj: _obj, args: _args )
    }

    /// public boolean java.lang.reflect.Method.equals(java.lang.Object)

    private static var equals_MethodID_2: jmethodID?

    open func equals( obj: java_swift.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: obj, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "equals", methodSig: "(Ljava/lang/Object;)Z", methodCache: &Method.equals_MethodID_2, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }

    override open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
        return equals( obj: _obj )
    }

    /// public java.lang.String java.lang.reflect.Method.toString()

    /// public int java.lang.reflect.Method.hashCode()

    /// public int java.lang.reflect.Method.getModifiers()

    /// public java.lang.String java.lang.reflect.Method.getName()

    /// public java.lang.String java.lang.reflect.Method.toGenericString()

    /// public boolean java.lang.reflect.Method.isSynthetic()

    /// public java.lang.reflect.TypeVariable[] java.lang.reflect.Method.getTypeParameters()

    /// public java.lang.Class java.lang.reflect.Method.getDeclaringClass()

    /// private sun.reflect.generics.factory.GenericsFactory java.lang.reflect.Method.getFactory()

    /// sun.reflect.generics.repository.ConstructorRepository java.lang.reflect.Method.getGenericInfo()

    /// sun.reflect.generics.repository.MethodRepository java.lang.reflect.Method.getGenericInfo()

    /// public java.lang.annotation.Annotation java.lang.reflect.Method.getAnnotation(java.lang.Class)

    /// public java.lang.annotation.Annotation[] java.lang.reflect.Method.getDeclaredAnnotations()

    /// public java.lang.Class java.lang.reflect.Method.getReturnType()

    private static var getReturnType_MethodID_3: jmethodID?

    open func getReturnType() -> java_swift.JavaClass! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getReturnType", methodSig: "()Ljava/lang/Class;", methodCache: &Method.getReturnType_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaClass( javaObject: __return ) : nil
    }


    /// public java.lang.Class[] java.lang.reflect.Method.getParameterTypes()

    /// public boolean java.lang.reflect.Method.isDefault()

    private static var isDefault_MethodID_4: jmethodID?

    open func isDefault() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isDefault", methodSig: "()Z", methodCache: &Method.isDefault_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }


    /// private java.lang.String java.lang.reflect.Method.getGenericSignature()

    /// java.lang.reflect.Method java.lang.reflect.Method.copy()

    /// public boolean java.lang.reflect.Method.isVarArgs()

    /// public int java.lang.reflect.Method.getParameterCount()

    /// public java.lang.annotation.Annotation[][] java.lang.reflect.Method.getParameterAnnotations()

    /// java.lang.reflect.Executable java.lang.reflect.Method.getRoot()

    /// boolean java.lang.reflect.Method.hasGenericInformation()

    /// byte[] java.lang.reflect.Method.getAnnotationBytes()

    /// public java.lang.reflect.Type java.lang.reflect.Method.getGenericReturnType()

    private static var getGenericReturnType_MethodID_5: jmethodID?

    open func getGenericReturnType() -> Type! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getGenericReturnType", methodSig: "()Ljava/lang/reflect/Type;", methodCache: &Method.getGenericReturnType_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TypeForward( javaObject: __return ) : nil
    }


    /// public java.lang.reflect.Type[] java.lang.reflect.Method.getGenericParameterTypes()

    /// public java.lang.Class[] java.lang.reflect.Method.getExceptionTypes()

    /// public java.lang.reflect.Type[] java.lang.reflect.Method.getGenericExceptionTypes()

    /// void java.lang.reflect.Method.specificToStringHeader(java.lang.StringBuilder)

    /// void java.lang.reflect.Method.specificToGenericStringHeader(java.lang.StringBuilder)

    /// public boolean java.lang.reflect.Method.isBridge()

    private static var isBridge_MethodID_6: jmethodID?

    open func isBridge() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isBridge", methodSig: "()Z", methodCache: &Method.isBridge_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }


    /// private sun.reflect.MethodAccessor java.lang.reflect.Method.acquireMethodAccessor()

    /// sun.reflect.MethodAccessor java.lang.reflect.Method.getMethodAccessor()

    /// void java.lang.reflect.Method.setMethodAccessor(sun.reflect.MethodAccessor)

    /// public java.lang.Object java.lang.reflect.Method.getDefaultValue()

    private static var getDefaultValue_MethodID_7: jmethodID?

    open func getDefaultValue() -> java_swift.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDefaultValue", methodSig: "()Ljava/lang/Object;", methodCache: &Method.getDefaultValue_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }


    /// public java.lang.reflect.AnnotatedType java.lang.reflect.Method.getAnnotatedReturnType()

    /// void java.lang.reflect.Method.handleParameterNumberMismatch(int,int)

}

