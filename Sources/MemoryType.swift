
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.lang.management.MemoryType ///

open class MemoryType: Enum {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var MemoryTypeJNIClass: jclass?

    /// public static final java.lang.management.MemoryType java.lang.management.MemoryType.HEAP

    private static var HEAP_FieldID: jfieldID?

    open static var HEAP: MemoryType! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "HEAP", fieldType: "Ljava/lang/management/MemoryType;", fieldCache: &HEAP_FieldID, className: "java/lang/management/MemoryType", classCache: &MemoryTypeJNIClass )
            return __value != nil ? MemoryType( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.management.MemoryType java.lang.management.MemoryType.NON_HEAP

    private static var NON_HEAP_FieldID: jfieldID?

    open static var NON_HEAP: MemoryType! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "NON_HEAP", fieldType: "Ljava/lang/management/MemoryType;", fieldCache: &NON_HEAP_FieldID, className: "java/lang/management/MemoryType", classCache: &MemoryTypeJNIClass )
            return __value != nil ? MemoryType( javaObject: __value ) : nil
        }
    }

    /// private final java.lang.String java.lang.management.MemoryType.description

    /// private static final long java.lang.management.MemoryType.serialVersionUID

    /// private static final java.lang.management.MemoryType[] java.lang.management.MemoryType.$VALUES

    /// private final java.lang.String java.lang.Enum.name

    /// private final int java.lang.Enum.ordinal

    /// private java.lang.management.MemoryType(java.lang.String,int,java.lang.String)

    /// public java.lang.String java.lang.management.MemoryType.toString()

    /// public static java.lang.management.MemoryType[] java.lang.management.MemoryType.values()

    private static var values_MethodID_1: jmethodID?

    open class func values() -> [MemoryType]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/management/MemoryType", classCache: &MemoryTypeJNIClass, methodName: "values", methodSig: "()[Ljava/lang/management/MemoryType;", methodCache: &values_MethodID_1, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [MemoryType](), from: __return )
    }


    /// public static java.lang.management.MemoryType java.lang.management.MemoryType.valueOf(java.lang.String)

    private static var valueOf_MethodID_2: jmethodID?

    open class func valueOf( name: String? ) -> MemoryType! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: name, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/management/MemoryType", classCache: &MemoryTypeJNIClass, methodName: "valueOf", methodSig: "(Ljava/lang/String;)Ljava/lang/management/MemoryType;", methodCache: &valueOf_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? MemoryType( javaObject: __return ) : nil
    }

    open class func valueOf( _ _name: String? ) -> MemoryType! {
        return valueOf( name: _name )
    }

}

