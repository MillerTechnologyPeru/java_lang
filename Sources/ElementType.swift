
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:03 GMT 2016 ///

/// class java.lang.annotation.ElementType ///

open class ElementType: Enum {

    public convenience init?( casting object: JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.lang.annotation.ElementType", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ElementTypeJNIClass: jclass?

    /// public static final java.lang.annotation.ElementType java.lang.annotation.ElementType.TYPE

    private static var TYPE_FieldID: jfieldID?

    open static var TYPE: ElementType! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "TYPE", fieldType: "Ljava/lang/annotation/ElementType;", fieldCache: &TYPE_FieldID, className: "java/lang/annotation/ElementType", classCache: &ElementTypeJNIClass )
            return __value != nil ? ElementType( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.annotation.ElementType java.lang.annotation.ElementType.FIELD

    private static var FIELD_FieldID: jfieldID?

    open static var FIELD: ElementType! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "FIELD", fieldType: "Ljava/lang/annotation/ElementType;", fieldCache: &FIELD_FieldID, className: "java/lang/annotation/ElementType", classCache: &ElementTypeJNIClass )
            return __value != nil ? ElementType( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.annotation.ElementType java.lang.annotation.ElementType.METHOD

    private static var METHOD_FieldID: jfieldID?

    open static var METHOD: ElementType! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "METHOD", fieldType: "Ljava/lang/annotation/ElementType;", fieldCache: &METHOD_FieldID, className: "java/lang/annotation/ElementType", classCache: &ElementTypeJNIClass )
            return __value != nil ? ElementType( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.annotation.ElementType java.lang.annotation.ElementType.PARAMETER

    private static var PARAMETER_FieldID: jfieldID?

    open static var PARAMETER: ElementType! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "PARAMETER", fieldType: "Ljava/lang/annotation/ElementType;", fieldCache: &PARAMETER_FieldID, className: "java/lang/annotation/ElementType", classCache: &ElementTypeJNIClass )
            return __value != nil ? ElementType( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.annotation.ElementType java.lang.annotation.ElementType.CONSTRUCTOR

    private static var CONSTRUCTOR_FieldID: jfieldID?

    open static var CONSTRUCTOR: ElementType! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "CONSTRUCTOR", fieldType: "Ljava/lang/annotation/ElementType;", fieldCache: &CONSTRUCTOR_FieldID, className: "java/lang/annotation/ElementType", classCache: &ElementTypeJNIClass )
            return __value != nil ? ElementType( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.annotation.ElementType java.lang.annotation.ElementType.LOCAL_VARIABLE

    private static var LOCAL_VARIABLE_FieldID: jfieldID?

    open static var LOCAL_VARIABLE: ElementType! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "LOCAL_VARIABLE", fieldType: "Ljava/lang/annotation/ElementType;", fieldCache: &LOCAL_VARIABLE_FieldID, className: "java/lang/annotation/ElementType", classCache: &ElementTypeJNIClass )
            return __value != nil ? ElementType( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.annotation.ElementType java.lang.annotation.ElementType.ANNOTATION_TYPE

    private static var ANNOTATION_TYPE_FieldID: jfieldID?

    open static var ANNOTATION_TYPE: ElementType! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "ANNOTATION_TYPE", fieldType: "Ljava/lang/annotation/ElementType;", fieldCache: &ANNOTATION_TYPE_FieldID, className: "java/lang/annotation/ElementType", classCache: &ElementTypeJNIClass )
            return __value != nil ? ElementType( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.annotation.ElementType java.lang.annotation.ElementType.PACKAGE

    private static var PACKAGE_FieldID: jfieldID?

    open static var PACKAGE: ElementType! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "PACKAGE", fieldType: "Ljava/lang/annotation/ElementType;", fieldCache: &PACKAGE_FieldID, className: "java/lang/annotation/ElementType", classCache: &ElementTypeJNIClass )
            return __value != nil ? ElementType( javaObject: __value ) : nil
        }
    }

    /// private static final java.lang.annotation.ElementType[] java.lang.annotation.ElementType.$VALUES

    /// private final java.lang.String java.lang.Enum.name

    /// private final int java.lang.Enum.ordinal

    /// private java.lang.annotation.ElementType(java.lang.String,int)

    /// public static java.lang.annotation.ElementType[] java.lang.annotation.ElementType.values()

    private static var values_MethodID_1: jmethodID?

    open class func values() -> [ElementType]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/annotation/ElementType", classCache: &ElementTypeJNIClass, methodName: "values", methodSig: "()[Ljava/lang/annotation/ElementType;", methodCache: &values_MethodID_1, args: &__args, locals: &__locals )
        return JNIType.decode( type: [ElementType](), from: __return )
    }


    /// public static java.lang.annotation.ElementType java.lang.annotation.ElementType.valueOf(java.lang.String)

    private static var valueOf_MethodID_2: jmethodID?

    open class func valueOf( arg0: String? ) -> ElementType! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/annotation/ElementType", classCache: &ElementTypeJNIClass, methodName: "valueOf", methodSig: "(Ljava/lang/String;)Ljava/lang/annotation/ElementType;", methodCache: &valueOf_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ElementType( javaObject: __return ) : nil
    }

    open class func valueOf( _ _arg0: String? ) -> ElementType! {
        return valueOf( arg0: _arg0 )
    }

}
