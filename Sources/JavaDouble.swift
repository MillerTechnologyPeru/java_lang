
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:12 GMT 2016 ///

/// class java.lang.Double ///

open class JavaDouble: Number, JavaComparable {

    public convenience init?( casting object: JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.lang.Double", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var JavaDoubleJNIClass: jclass?

    /// public static final double java.lang.Double.POSITIVE_INFINITY

    private static var POSITIVE_INFINITY_FieldID: jfieldID?

    open static var POSITIVE_INFINITY: Double {
        get {
            let __value = JNIField.GetStaticDoubleField( fieldName: "POSITIVE_INFINITY", fieldType: "D", fieldCache: &POSITIVE_INFINITY_FieldID, className: "java/lang/Double", classCache: &JavaDoubleJNIClass )
            return JNIType.decode( type: Double(), from: __value )
        }
    }

    /// public static final double java.lang.Double.NEGATIVE_INFINITY

    private static var NEGATIVE_INFINITY_FieldID: jfieldID?

    open static var NEGATIVE_INFINITY: Double {
        get {
            let __value = JNIField.GetStaticDoubleField( fieldName: "NEGATIVE_INFINITY", fieldType: "D", fieldCache: &NEGATIVE_INFINITY_FieldID, className: "java/lang/Double", classCache: &JavaDoubleJNIClass )
            return JNIType.decode( type: Double(), from: __value )
        }
    }

    /// public static final double java.lang.Double.NaN

    private static var NaN_FieldID: jfieldID?

    open static var NaN: Double {
        get {
            let __value = JNIField.GetStaticDoubleField( fieldName: "NaN", fieldType: "D", fieldCache: &NaN_FieldID, className: "java/lang/Double", classCache: &JavaDoubleJNIClass )
            return JNIType.decode( type: Double(), from: __value )
        }
    }

    /// public static final double java.lang.Double.MAX_VALUE

    private static var MAX_VALUE_FieldID: jfieldID?

    open static var MAX_VALUE: Double {
        get {
            let __value = JNIField.GetStaticDoubleField( fieldName: "MAX_VALUE", fieldType: "D", fieldCache: &MAX_VALUE_FieldID, className: "java/lang/Double", classCache: &JavaDoubleJNIClass )
            return JNIType.decode( type: Double(), from: __value )
        }
    }

    /// public static final double java.lang.Double.MIN_NORMAL

    private static var MIN_NORMAL_FieldID: jfieldID?

    open static var MIN_NORMAL: Double {
        get {
            let __value = JNIField.GetStaticDoubleField( fieldName: "MIN_NORMAL", fieldType: "D", fieldCache: &MIN_NORMAL_FieldID, className: "java/lang/Double", classCache: &JavaDoubleJNIClass )
            return JNIType.decode( type: Double(), from: __value )
        }
    }

    /// public static final double java.lang.Double.MIN_VALUE

    private static var MIN_VALUE_FieldID: jfieldID?

    open static var MIN_VALUE: Double {
        get {
            let __value = JNIField.GetStaticDoubleField( fieldName: "MIN_VALUE", fieldType: "D", fieldCache: &MIN_VALUE_FieldID, className: "java/lang/Double", classCache: &JavaDoubleJNIClass )
            return JNIType.decode( type: Double(), from: __value )
        }
    }

    /// public static final int java.lang.Double.MAX_EXPONENT

    private static var MAX_EXPONENT_FieldID: jfieldID?

    open static var MAX_EXPONENT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "MAX_EXPONENT", fieldType: "I", fieldCache: &MAX_EXPONENT_FieldID, className: "java/lang/Double", classCache: &JavaDoubleJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.lang.Double.MIN_EXPONENT

    private static var MIN_EXPONENT_FieldID: jfieldID?

    open static var MIN_EXPONENT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "MIN_EXPONENT", fieldType: "I", fieldCache: &MIN_EXPONENT_FieldID, className: "java/lang/Double", classCache: &JavaDoubleJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.lang.Double.SIZE

    private static var SIZE_FieldID: jfieldID?

    open static var SIZE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SIZE", fieldType: "I", fieldCache: &SIZE_FieldID, className: "java/lang/Double", classCache: &JavaDoubleJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final java.lang.Class java.lang.Double.TYPE

    private static var TYPE_FieldID: jfieldID?

    open static var TYPE: Class! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "TYPE", fieldType: "Ljava/lang/Class;", fieldCache: &TYPE_FieldID, className: "java/lang/Double", classCache: &JavaDoubleJNIClass )
            return __value != nil ? Class( javaObject: __value ) : nil
        }
    }

    /// private final double java.lang.Double.value

    /// private static final long java.lang.Double.serialVersionUID

    /// private static final long java.lang.Number.serialVersionUID

    /// public java.lang.Double(double)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/Double", classCache: &JavaDouble.JavaDoubleJNIClass, methodSig: "(D)V", methodCache: &JavaDouble.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Double ) {
        self.init( arg0: _arg0 )
    }

    /// public java.lang.Double(java.lang.String) throws java.lang.NumberFormatException

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: String? ) throws {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/Double", classCache: &JavaDouble.JavaDoubleJNIClass, methodSig: "(Ljava/lang/String;)V", methodCache: &JavaDouble.new_MethodID_2, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw NumberFormatException( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String? ) throws {
        try self.init( arg0: _arg0 )
    }

    /// public boolean java.lang.Double.equals(java.lang.Object)

    /// public static java.lang.String java.lang.Double.toString(double)

    private static var toString_MethodID_3: jmethodID?

    open class func toString( arg0: Double ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Double", classCache: &JavaDoubleJNIClass, methodName: "toString", methodSig: "(D)Ljava/lang/String;", methodCache: &toString_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }

    open class func toString( _ _arg0: Double ) -> String! {
        return toString( arg0: _arg0 )
    }

    /// public java.lang.String java.lang.Double.toString()

    /// public int java.lang.Double.hashCode()

    /// public static native long java.lang.Double.doubleToRawLongBits(double)

    private static var doubleToRawLongBits_MethodID_4: jmethodID?

    open class func doubleToRawLongBits( arg0: Double ) -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticLongMethod( className: "java/lang/Double", classCache: &JavaDoubleJNIClass, methodName: "doubleToRawLongBits", methodSig: "(D)J", methodCache: &doubleToRawLongBits_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }

    open class func doubleToRawLongBits( _ _arg0: Double ) -> Int64 {
        return doubleToRawLongBits( arg0: _arg0 )
    }

    /// public static long java.lang.Double.doubleToLongBits(double)

    private static var doubleToLongBits_MethodID_5: jmethodID?

    open class func doubleToLongBits( arg0: Double ) -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticLongMethod( className: "java/lang/Double", classCache: &JavaDoubleJNIClass, methodName: "doubleToLongBits", methodSig: "(D)J", methodCache: &doubleToLongBits_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }

    open class func doubleToLongBits( _ _arg0: Double ) -> Int64 {
        return doubleToLongBits( arg0: _arg0 )
    }

    /// public static native double java.lang.Double.longBitsToDouble(long)

    private static var longBitsToDouble_MethodID_6: jmethodID?

    open class func longBitsToDouble( arg0: Int64 ) -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticDoubleMethod( className: "java/lang/Double", classCache: &JavaDoubleJNIClass, methodName: "longBitsToDouble", methodSig: "(J)D", methodCache: &longBitsToDouble_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: Double(), from: __return )
    }

    open class func longBitsToDouble( _ _arg0: Int64 ) -> Double {
        return longBitsToDouble( arg0: _arg0 )
    }

    /// public int java.lang.Double.compareTo(java.lang.Object)

    private static var compareTo_MethodID_7: jmethodID?

    open func compareTo( arg0: JavaObject? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "compareTo", methodSig: "(Ljava/lang/Object;)I", methodCache: &JavaDouble.compareTo_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func compareTo( _ _arg0: JavaObject? ) -> Int {
        return compareTo( arg0: _arg0 )
    }

    /// public int java.lang.Double.compareTo(java.lang.Double)

    private static var compareTo_MethodID_8: jmethodID?

    open func compareTo( arg0: JavaDouble? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "compareTo", methodSig: "(Ljava/lang/Double;)I", methodCache: &JavaDouble.compareTo_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func compareTo( _ _arg0: JavaDouble? ) -> Int {
        return compareTo( arg0: _arg0 )
    }

    /// public byte java.lang.Double.byteValue()

    /// public short java.lang.Double.shortValue()

    /// public int java.lang.Double.intValue()

    /// public long java.lang.Double.longValue()

    /// public float java.lang.Double.floatValue()

    /// public double java.lang.Double.doubleValue()

    /// public static java.lang.Double java.lang.Double.valueOf(java.lang.String) throws java.lang.NumberFormatException

    private static var valueOf_MethodID_9: jmethodID?

    open class func valueOf( arg0: String? ) throws /* java.lang.NumberFormatException */ -> JavaDouble! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Double", classCache: &JavaDoubleJNIClass, methodName: "valueOf", methodSig: "(Ljava/lang/String;)Ljava/lang/Double;", methodCache: &valueOf_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw NumberFormatException( javaObject: throwable )
        }
        return __return != nil ? JavaDouble( javaObject: __return ) : nil
    }

    open class func valueOf( _ _arg0: String? ) throws /* java.lang.NumberFormatException */ -> JavaDouble! {
        return try valueOf( arg0: _arg0 )
    }

    /// public static java.lang.Double java.lang.Double.valueOf(double)

    private static var valueOf_MethodID_10: jmethodID?

    open class func valueOf( arg0: Double ) -> JavaDouble! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Double", classCache: &JavaDoubleJNIClass, methodName: "valueOf", methodSig: "(D)Ljava/lang/Double;", methodCache: &valueOf_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JavaDouble( javaObject: __return ) : nil
    }

    open class func valueOf( _ _arg0: Double ) -> JavaDouble! {
        return valueOf( arg0: _arg0 )
    }

    /// public static java.lang.String java.lang.Double.toHexString(double)

    private static var toHexString_MethodID_11: jmethodID?

    open class func toHexString( arg0: Double ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/lang/Double", classCache: &JavaDoubleJNIClass, methodName: "toHexString", methodSig: "(D)Ljava/lang/String;", methodCache: &toHexString_MethodID_11, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }

    open class func toHexString( _ _arg0: Double ) -> String! {
        return toHexString( arg0: _arg0 )
    }

    /// public static int java.lang.Double.compare(double,double)

    private static var compare_MethodID_12: jmethodID?

    open class func compare( arg0: Double, arg1: Double ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/lang/Double", classCache: &JavaDoubleJNIClass, methodName: "compare", methodSig: "(DD)I", methodCache: &compare_MethodID_12, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func compare( _ _arg0: Double, _ _arg1: Double ) -> Int {
        return compare( arg0: _arg0, arg1: _arg1 )
    }

    /// public static boolean java.lang.Double.isNaN(double)

    private static var isNaN_MethodID_13: jmethodID?

    open class func isNaN( arg0: Double ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Double", classCache: &JavaDoubleJNIClass, methodName: "isNaN", methodSig: "(D)Z", methodCache: &isNaN_MethodID_13, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isNaN( _ _arg0: Double ) -> Bool {
        return isNaN( arg0: _arg0 )
    }

    /// public boolean java.lang.Double.isNaN()

    private static var isNaN_MethodID_14: jmethodID?

    open func isNaN() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isNaN", methodSig: "()Z", methodCache: &JavaDouble.isNaN_MethodID_14, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public boolean java.lang.Double.isInfinite()

    private static var isInfinite_MethodID_15: jmethodID?

    open func isInfinite() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isInfinite", methodSig: "()Z", methodCache: &JavaDouble.isInfinite_MethodID_15, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public static boolean java.lang.Double.isInfinite(double)

    private static var isInfinite_MethodID_16: jmethodID?

    open class func isInfinite( arg0: Double ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/lang/Double", classCache: &JavaDoubleJNIClass, methodName: "isInfinite", methodSig: "(D)Z", methodCache: &isInfinite_MethodID_16, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isInfinite( _ _arg0: Double ) -> Bool {
        return isInfinite( arg0: _arg0 )
    }

    /// public static double java.lang.Double.parseDouble(java.lang.String) throws java.lang.NumberFormatException

    private static var parseDouble_MethodID_17: jmethodID?

    open class func parseDouble( arg0: String? ) throws /* java.lang.NumberFormatException */ -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticDoubleMethod( className: "java/lang/Double", classCache: &JavaDoubleJNIClass, methodName: "parseDouble", methodSig: "(Ljava/lang/String;)D", methodCache: &parseDouble_MethodID_17, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw NumberFormatException( javaObject: throwable )
        }
        return JNIType.decode( type: Double(), from: __return )
    }

    open class func parseDouble( _ _arg0: String? ) throws /* java.lang.NumberFormatException */ -> Double {
        return try parseDouble( arg0: _arg0 )
    }

}
