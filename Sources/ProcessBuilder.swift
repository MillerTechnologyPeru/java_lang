
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:02 GMT 2016 ///

/// class java.lang.ProcessBuilder ///

open class ProcessBuilder: JavaObject {

    public convenience init?( casting object: JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.lang.ProcessBuilder", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ProcessBuilderJNIClass: jclass?

    /// private java.util.List java.lang.ProcessBuilder.command

    /// private java.io.File java.lang.ProcessBuilder.directory

    /// private java.util.Map java.lang.ProcessBuilder.environment

    /// private boolean java.lang.ProcessBuilder.redirectErrorStream

    /// static final boolean java.lang.ProcessBuilder.$assertionsDisabled

    /// public java.lang.ProcessBuilder(java.util.List)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: /* java.util.List */ UnclassedProtocol? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __object = JNIMethod.NewObject( className: "java/lang/ProcessBuilder", classCache: &ProcessBuilder.ProcessBuilderJNIClass, methodSig: "(Ljava/util/List;)V", methodCache: &ProcessBuilder.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: /* java.util.List */ UnclassedProtocol? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.lang.ProcessBuilder(java.lang.String[])

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: [String]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/lang/ProcessBuilder", classCache: &ProcessBuilder.ProcessBuilderJNIClass, methodSig: "([Ljava/lang/String;)V", methodCache: &ProcessBuilder.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: [String]? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.lang.Process java.lang.ProcessBuilder.start() throws java.io.IOException

    private static var start_MethodID_3: jmethodID?

    open func start() throws /* java.io.IOException */ -> Process! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "start", methodSig: "()Ljava/lang/Process;", methodCache: &ProcessBuilder.start_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw /* java.io.IOException */ UnclassedObject( javaObject: throwable )
        }
        return __return != nil ? Process( javaObject: __return ) : nil
    }


    /// public java.util.Map java.lang.ProcessBuilder.environment()

    private static var environment_MethodID_4: jmethodID?

    open func environment() -> /* java.util.Map */ UnclassedProtocol! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "environment", methodSig: "()Ljava/util/Map;", methodCache: &ProcessBuilder.environment_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* java.util.Map */ UnclassedProtocolForward( javaObject: __return ) : nil
    }


    /// java.lang.ProcessBuilder java.lang.ProcessBuilder.environment(java.lang.String[])

    /// public java.lang.ProcessBuilder java.lang.ProcessBuilder.directory(java.io.File)

    private static var directory_MethodID_5: jmethodID?

    open func directory( arg0: /* java.io.File */ UnclassedObject? ) -> ProcessBuilder! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "directory", methodSig: "(Ljava/io/File;)Ljava/lang/ProcessBuilder;", methodCache: &ProcessBuilder.directory_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ProcessBuilder( javaObject: __return ) : nil
    }

    open func directory( _ _arg0: /* java.io.File */ UnclassedObject? ) -> ProcessBuilder! {
        return directory( arg0: _arg0 )
    }

    /// public java.io.File java.lang.ProcessBuilder.directory()

    private static var directory_MethodID_6: jmethodID?

    open func directory() -> /* java.io.File */ UnclassedObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "directory", methodSig: "()Ljava/io/File;", methodCache: &ProcessBuilder.directory_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* java.io.File */ UnclassedObject( javaObject: __return ) : nil
    }


    /// public java.lang.ProcessBuilder java.lang.ProcessBuilder.command(java.util.List)

    private static var command_MethodID_7: jmethodID?

    open func command( arg0: /* java.util.List */ UnclassedProtocol? ) -> ProcessBuilder! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "command", methodSig: "(Ljava/util/List;)Ljava/lang/ProcessBuilder;", methodCache: &ProcessBuilder.command_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ProcessBuilder( javaObject: __return ) : nil
    }

    open func command( _ _arg0: /* java.util.List */ UnclassedProtocol? ) -> ProcessBuilder! {
        return command( arg0: _arg0 )
    }

    /// public java.util.List java.lang.ProcessBuilder.command()

    private static var command_MethodID_8: jmethodID?

    open func command() -> /* java.util.List */ UnclassedProtocol! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "command", methodSig: "()Ljava/util/List;", methodCache: &ProcessBuilder.command_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* java.util.List */ UnclassedProtocolForward( javaObject: __return ) : nil
    }


    /// public java.lang.ProcessBuilder java.lang.ProcessBuilder.command(java.lang.String[])

    private static var command_MethodID_9: jmethodID?

    open func command( arg0: [String]? ) -> ProcessBuilder! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "command", methodSig: "([Ljava/lang/String;)Ljava/lang/ProcessBuilder;", methodCache: &ProcessBuilder.command_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ProcessBuilder( javaObject: __return ) : nil
    }

    open func command( _ _arg0: [String]? ) -> ProcessBuilder! {
        return command( arg0: _arg0 )
    }

    /// public boolean java.lang.ProcessBuilder.redirectErrorStream()

    private static var redirectErrorStream_MethodID_10: jmethodID?

    open func redirectErrorStream() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "redirectErrorStream", methodSig: "()Z", methodCache: &ProcessBuilder.redirectErrorStream_MethodID_10, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public java.lang.ProcessBuilder java.lang.ProcessBuilder.redirectErrorStream(boolean)

    private static var redirectErrorStream_MethodID_11: jmethodID?

    open func redirectErrorStream( arg0: Bool ) -> ProcessBuilder! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "redirectErrorStream", methodSig: "(Z)Ljava/lang/ProcessBuilder;", methodCache: &ProcessBuilder.redirectErrorStream_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ProcessBuilder( javaObject: __return ) : nil
    }

    open func redirectErrorStream( _ _arg0: Bool ) -> ProcessBuilder! {
        return redirectErrorStream( arg0: _arg0 )
    }

    /// private java.io.IOException java.lang.ProcessBuilder.processException(java.lang.Exception,java.lang.SecurityManager,java.lang.String,java.lang.String)

}
