
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:29:02 GMT 2016 ///

/// interface java.lang.SuppressWarnings ///

public protocol SuppressWarnings: Annotation {

    /// public abstract java.lang.String[] java.lang.SuppressWarnings.value()

    func value() -> [String]!

}

open class SuppressWarningsForward: AnnotationForward, SuppressWarnings {

    private static var SuppressWarningsJNIClass: jclass?

    /// public abstract java.lang.String[] java.lang.SuppressWarnings.value()

    private static var value_MethodID_2: jmethodID?

    open func value() -> [String]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "value", methodSig: "()[Ljava/lang/String;", methodCache: &SuppressWarningsForward.value_MethodID_2, args: &__args, locals: &__locals )
        return JNIType.decode( type: [String](), from: __return )
    }


    /// public abstract boolean java.lang.annotation.Annotation.equals(java.lang.Object)

    private static var equals_MethodID_3: jmethodID?

    override open func equals( arg0: JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "equals", methodSig: "(Ljava/lang/Object;)Z", methodCache: &SuppressWarningsForward.equals_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func equals( _ _arg0: JavaObject? ) -> Bool {
        return equals( arg0: _arg0 )
    }

    /// public abstract java.lang.String java.lang.annotation.Annotation.toString()

    private static var toString_MethodID_4: jmethodID?

    override open func toString() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "toString", methodSig: "()Ljava/lang/String;", methodCache: &SuppressWarningsForward.toString_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }


    /// public abstract int java.lang.annotation.Annotation.hashCode()

    private static var hashCode_MethodID_5: jmethodID?

    override open func hashCode() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "hashCode", methodSig: "()I", methodCache: &SuppressWarningsForward.hashCode_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract java.lang.Class java.lang.annotation.Annotation.annotationType()

    private static var annotationType_MethodID_6: jmethodID?

    override open func annotationType() -> Class! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "annotationType", methodSig: "()Ljava/lang/Class;", methodCache: &SuppressWarningsForward.annotationType_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Class( javaObject: __return ) : nil
    }


}


